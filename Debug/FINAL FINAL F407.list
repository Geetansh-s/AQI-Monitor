
FINAL FINAL F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000223c  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007994  08007994  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800799c  0800799c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080079a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000007b8  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000854  20000854  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d5a5  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022de  00000000  00000000  0002d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b60  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008c8  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021906  00000000  00000000  00030dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010792  00000000  00000000  000526c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5b75  00000000  00000000  00062e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003320  00000000  00000000  001289d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005740 	.word	0x08005740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08005740 	.word	0x08005740

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <get_Actual_AQI>:
 * @param[in]  Gas concentrations of CO, NO2, PM2.5, PM10
 * @param[out] AQI
 * @note       none
 */
uint16_t get_Actual_AQI(uint16_t no2_index ,uint16_t co_index, uint16_t pm2_5index, uint16_t pm_10_index)
{
 800057c:	b490      	push	{r4, r7}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4604      	mov	r4, r0
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4623      	mov	r3, r4
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	4603      	mov	r3, r0
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	803b      	strh	r3, [r7, #0]
	if(no2_index < co_index)
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d203      	bcs.n	80005aa <get_Actual_AQI+0x2e>
	{
		largest_aqi[0] = co_index;
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <get_Actual_AQI+0x78>)
 80005a4:	88bb      	ldrh	r3, [r7, #4]
 80005a6:	8013      	strh	r3, [r2, #0]
 80005a8:	e002      	b.n	80005b0 <get_Actual_AQI+0x34>
	}
	else
	{
		largest_aqi[0] = no2_index;
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <get_Actual_AQI+0x78>)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	8013      	strh	r3, [r2, #0]
	}

	if(pm2_5index < pm_10_index)
 80005b0:	887a      	ldrh	r2, [r7, #2]
 80005b2:	883b      	ldrh	r3, [r7, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d203      	bcs.n	80005c0 <get_Actual_AQI+0x44>
	{
		largest_aqi[1] = pm_10_index;
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <get_Actual_AQI+0x78>)
 80005ba:	883b      	ldrh	r3, [r7, #0]
 80005bc:	8053      	strh	r3, [r2, #2]
 80005be:	e002      	b.n	80005c6 <get_Actual_AQI+0x4a>
	}
	else
	{
		largest_aqi[1] = pm2_5index;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <get_Actual_AQI+0x78>)
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	8053      	strh	r3, [r2, #2]

	}

	if(largest_aqi[0] < largest_aqi[1])
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <get_Actual_AQI+0x78>)
 80005c8:	881a      	ldrh	r2, [r3, #0]
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <get_Actual_AQI+0x78>)
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d204      	bcs.n	80005dc <get_Actual_AQI+0x60>
	{
		master_aqi = largest_aqi[1] ;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <get_Actual_AQI+0x78>)
 80005d4:	885a      	ldrh	r2, [r3, #2]
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <get_Actual_AQI+0x7c>)
 80005d8:	801a      	strh	r2, [r3, #0]
 80005da:	e003      	b.n	80005e4 <get_Actual_AQI+0x68>
	}
	else
	{
		master_aqi = largest_aqi[0];
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <get_Actual_AQI+0x78>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <get_Actual_AQI+0x7c>)
 80005e2:	801a      	strh	r2, [r3, #0]
	}
	return(master_aqi);
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <get_Actual_AQI+0x7c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc90      	pop	{r4, r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	200000b8 	.word	0x200000b8

080005fc <ZPH03_Init>:
 * @param[out] void
 * @note       none
 */

void ZPH03_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart4, (uint8_t*)qna_mode_cmd, sizeof(qna_mode_cmd), HAL_MAX_DELAY);
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2209      	movs	r2, #9
 8000606:	4903      	ldr	r1, [pc, #12]	; (8000614 <ZPH03_Init+0x18>)
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <ZPH03_Init+0x1c>)
 800060a:	f003 ff3f 	bl	800448c <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	200006cc 	.word	0x200006cc

0800061c <ZPH03_PM_2_5>:
 * @param[out] PM 2.5 Concentration String
 * @note       none
 */

uint16_t ZPH03_PM_2_5(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	//Transmit command to ask for Data
    HAL_UART_Transmit(&huart4, (uint8_t*)getdata, sizeof(getdata), HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2209      	movs	r2, #9
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <ZPH03_PM_2_5+0x40>)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <ZPH03_PM_2_5+0x44>)
 800062a:	f003 ff2f 	bl	800448c <HAL_UART_Transmit>

    //Receive Data Bytes
	HAL_UART_Receive(&huart4,(uint8_t*)rxbuf, 9, HAL_MAX_DELAY);
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2209      	movs	r2, #9
 8000634:	490b      	ldr	r1, [pc, #44]	; (8000664 <ZPH03_PM_2_5+0x48>)
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <ZPH03_PM_2_5+0x44>)
 8000638:	f003 ffb3 	bl	80045a2 <HAL_UART_Receive>

	//Convert data to PM 2.5 Information According to Datasheet Formula
	pm_2_5   =  ((rxbuf[2]*256)+ rxbuf[3]) ;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <ZPH03_PM_2_5+0x48>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	b29b      	uxth	r3, r3
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <ZPH03_PM_2_5+0x48>)
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	b29b      	uxth	r3, r3
 800064c:	4413      	add	r3, r2
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ZPH03_PM_2_5+0x4c>)
 8000652:	801a      	strh	r2, [r3, #0]

 	return(pm_2_5);
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <ZPH03_PM_2_5+0x4c>)
 8000656:	881b      	ldrh	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000000c 	.word	0x2000000c
 8000660:	200006cc 	.word	0x200006cc
 8000664:	200000c0 	.word	0x200000c0
 8000668:	200000ca 	.word	0x200000ca

0800066c <ZPH03_PM_10>:
 * @param[out] PM 10 Concentration String
 * @note       none
 */

uint16_t ZPH03_PM_10(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//Transmit command to ask for Data
	HAL_UART_Transmit(&huart4, (uint8_t*)getdata, sizeof(getdata), HAL_MAX_DELAY);
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	2209      	movs	r2, #9
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <ZPH03_PM_10+0x40>)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <ZPH03_PM_10+0x44>)
 800067a:	f003 ff07 	bl	800448c <HAL_UART_Transmit>

    //Receive Data Bytes
	HAL_UART_Receive(&huart4,(uint8_t*)rxbuf, 9, HAL_MAX_DELAY);
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2209      	movs	r2, #9
 8000684:	490b      	ldr	r1, [pc, #44]	; (80006b4 <ZPH03_PM_10+0x48>)
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <ZPH03_PM_10+0x44>)
 8000688:	f003 ff8b 	bl	80045a2 <HAL_UART_Receive>

	//Convert data to PM 2.5 Information According to Datasheet Formula
	pm_10    =  ((rxbuf[4]*256)+ rxbuf[5]) ;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <ZPH03_PM_10+0x48>)
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <ZPH03_PM_10+0x48>)
 8000698:	795b      	ldrb	r3, [r3, #5]
 800069a:	b29b      	uxth	r3, r3
 800069c:	4413      	add	r3, r2
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <ZPH03_PM_10+0x4c>)
 80006a2:	801a      	strh	r2, [r3, #0]

 	return(pm_10);
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <ZPH03_PM_10+0x4c>)
 80006a6:	881b      	ldrh	r3, [r3, #0]

}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000000c 	.word	0x2000000c
 80006b0:	200006cc 	.word	0x200006cc
 80006b4:	200000c0 	.word	0x200000c0
 80006b8:	200000cc 	.word	0x200000cc

080006bc <ZPH03_pm_2_5_getSubindex>:
 * @param[out] PM 2.5 sub index
 * @note       none
 */

uint16_t ZPH03_pm_2_5_getSubindex(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
	uint16_t ugm3 = pm_2_5;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <ZPH03_pm_2_5_getSubindex+0x8c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	80fb      	strh	r3, [r7, #6]

	if(ugm3 <= 30)
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	2b1e      	cmp	r3, #30
 80006cc:	d803      	bhi.n	80006d6 <ZPH03_pm_2_5_getSubindex+0x1a>
	{
		pm_2_5_subindex  = 50;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 80006d0:	2232      	movs	r2, #50	; 0x32
 80006d2:	801a      	strh	r2, [r3, #0]
 80006d4:	e02f      	b.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	}
	else if(ugm3 > 30 && ugm3 <= 60 )
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	2b1e      	cmp	r3, #30
 80006da:	d906      	bls.n	80006ea <ZPH03_pm_2_5_getSubindex+0x2e>
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	2b3c      	cmp	r3, #60	; 0x3c
 80006e0:	d803      	bhi.n	80006ea <ZPH03_pm_2_5_getSubindex+0x2e>
	{
		pm_2_5_subindex = 100;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 80006e4:	2264      	movs	r2, #100	; 0x64
 80006e6:	801a      	strh	r2, [r3, #0]
 80006e8:	e025      	b.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	}
	else if(ugm3 > 60 && ugm3 <= 90)
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	2b3c      	cmp	r3, #60	; 0x3c
 80006ee:	d906      	bls.n	80006fe <ZPH03_pm_2_5_getSubindex+0x42>
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	2b5a      	cmp	r3, #90	; 0x5a
 80006f4:	d803      	bhi.n	80006fe <ZPH03_pm_2_5_getSubindex+0x42>
	{
		pm_2_5_subindex = 150;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 80006f8:	2296      	movs	r2, #150	; 0x96
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	e01b      	b.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	}
	else if(ugm3 > 90 && ugm3 <= 120)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b5a      	cmp	r3, #90	; 0x5a
 8000702:	d906      	bls.n	8000712 <ZPH03_pm_2_5_getSubindex+0x56>
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	2b78      	cmp	r3, #120	; 0x78
 8000708:	d803      	bhi.n	8000712 <ZPH03_pm_2_5_getSubindex+0x56>
	{
		pm_2_5_subindex = 250;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 800070c:	22fa      	movs	r2, #250	; 0xfa
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e011      	b.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	}
	else if(ugm3 > 120 && ugm3 <= 250)
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b78      	cmp	r3, #120	; 0x78
 8000716:	d907      	bls.n	8000728 <ZPH03_pm_2_5_getSubindex+0x6c>
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2bfa      	cmp	r3, #250	; 0xfa
 800071c:	d804      	bhi.n	8000728 <ZPH03_pm_2_5_getSubindex+0x6c>
	{
		pm_2_5_subindex = 350;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 8000720:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000724:	801a      	strh	r2, [r3, #0]
 8000726:	e006      	b.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	}
	else if(ugm3 > 250)
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	2bfa      	cmp	r3, #250	; 0xfa
 800072c:	d903      	bls.n	8000736 <ZPH03_pm_2_5_getSubindex+0x7a>
	{
		pm_2_5_subindex = 400;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 8000730:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000734:	801a      	strh	r2, [r3, #0]
	}

	return(pm_2_5_subindex);
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <ZPH03_pm_2_5_getSubindex+0x90>)
 8000738:	881b      	ldrh	r3, [r3, #0]
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200000ca 	.word	0x200000ca
 800074c:	200000ce 	.word	0x200000ce

08000750 <ens160_Init>:
 * @param[out] void
 * @note       none
 */

void ens160_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af02      	add	r7, sp, #8
	  // Change the sensor mode to standard mode
	  buf[0] = REG_OPMODE;
 8000756:	2210      	movs	r2, #16
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <ens160_Init+0x2c>)
 800075a:	701a      	strb	r2, [r3, #0]
	  buf[1] = OPMODE_STANDARD;
 800075c:	2202      	movs	r2, #2
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <ens160_Init+0x2c>)
 8000760:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c2, ENS160_ADDR, buf, 2, HAL_MAX_DELAY);
 8000762:	23a6      	movs	r3, #166	; 0xa6
 8000764:	b299      	uxth	r1, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	4a03      	ldr	r2, [pc, #12]	; (800077c <ens160_Init+0x2c>)
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <ens160_Init+0x30>)
 8000772:	f002 f9bf 	bl	8002af4 <HAL_I2C_Master_Transmit>
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000774 	.word	0x20000774
 8000780:	20000718 	.word	0x20000718

08000784 <ens_getCO2_PPM>:
 * @note       none
 */


uint16_t ens_getCO2_PPM(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af02      	add	r7, sp, #8
	  //Transmit Command To get CO2 Values From CO2 Register
	  CO2buf[0] = REG_DATA_CO2;
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <ens_getCO2_PPM+0x58>)
 800078e:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Master_Transmit(&hi2c2, ENS160_ADDR, CO2buf, 1, HAL_MAX_DELAY);
 8000790:	23a6      	movs	r3, #166	; 0xa6
 8000792:	b299      	uxth	r1, r3
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <ens_getCO2_PPM+0x58>)
 800079e:	4810      	ldr	r0, [pc, #64]	; (80007e0 <ens_getCO2_PPM+0x5c>)
 80007a0:	f002 f9a8 	bl	8002af4 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2, ENS160_ADDR, CO2buf, 2, HAL_MAX_DELAY);
 80007a4:	23a6      	movs	r3, #166	; 0xa6
 80007a6:	b299      	uxth	r1, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2302      	movs	r3, #2
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <ens_getCO2_PPM+0x58>)
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <ens_getCO2_PPM+0x5c>)
 80007b4:	f002 fa9c 	bl	8002cf0 <HAL_I2C_Master_Receive>

	  // combines two 8-bit data into one 16-bit data, LSB Received First With Data Right Aligned, LSB | with MSB << 8 positions, Little Endian

	  CO2_value = ((CO2buf[0] | CO2buf[1]<<8));
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <ens_getCO2_PPM+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b21a      	sxth	r2, r3
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <ens_getCO2_PPM+0x58>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ens_getCO2_PPM+0x60>)
 80007ce:	801a      	strh	r2, [r3, #0]

	  return(CO2_value);
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <ens_getCO2_PPM+0x60>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000078c 	.word	0x2000078c
 80007e0:	20000718 	.word	0x20000718
 80007e4:	2000076c 	.word	0x2000076c

080007e8 <ens_getCO2_Quality>:
 * @param[out] char pointer with Quality
 * @note       none
 */

char* ens_getCO2_Quality(uint16_t co2ppm)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	if(co2ppm <= 400)
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007f8:	d807      	bhi.n	800080a <ens_getCO2_Quality+0x22>
	{
		 strcpy(co2Quality, "GOOD");
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <ens_getCO2_Quality+0x64>)
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <ens_getCO2_Quality+0x68>)
 80007fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000802:	6018      	str	r0, [r3, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	7019      	strb	r1, [r3, #0]
 8000808:	e018      	b.n	800083c <ens_getCO2_Quality+0x54>
	}

	else if(co2ppm > 400 && co2ppm <= 1000)
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000810:	d909      	bls.n	8000826 <ens_getCO2_Quality+0x3e>
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000818:	d805      	bhi.n	8000826 <ens_getCO2_Quality+0x3e>
	{
		 strcpy(co2Quality, "MODERATE");
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <ens_getCO2_Quality+0x64>)
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <ens_getCO2_Quality+0x6c>)
 800081e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000820:	c303      	stmia	r3!, {r0, r1}
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e00a      	b.n	800083c <ens_getCO2_Quality+0x54>
	}

	else if(co2ppm > 1000)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082c:	d906      	bls.n	800083c <ens_getCO2_Quality+0x54>
	{
		 strcpy(co2Quality, "POOR");
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <ens_getCO2_Quality+0x64>)
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <ens_getCO2_Quality+0x70>)
 8000832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	3304      	adds	r3, #4
 800083a:	7019      	strb	r1, [r3, #0]
	}

	return(co2Quality);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <ens_getCO2_Quality+0x64>)

}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	200000d0 	.word	0x200000d0
 8000850:	08005758 	.word	0x08005758
 8000854:	08005760 	.word	0x08005760
 8000858:	0800576c 	.word	0x0800576c

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f001 fceb 	bl	800223c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 fbe5 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fcfd 	bl	8001268 <MX_GPIO_Init>
  MX_I2C1_Init();
 800086e:	f000 fc4b 	bl	8001108 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000872:	f000 fc77 	bl	8001164 <MX_I2C2_Init>
  MX_UART4_Init();
 8000876:	f000 fca3 	bl	80011c0 <MX_UART4_Init>
  MX_UART5_Init();
 800087a:	f000 fccb 	bl	8001214 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart5, (uint8_t*)"AT+RST\r\n", sizeof("AT+RST\r\n"), 1000);
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	2209      	movs	r2, #9
 8000884:	49d3      	ldr	r1, [pc, #844]	; (8000bd4 <main+0x378>)
 8000886:	48d4      	ldr	r0, [pc, #848]	; (8000bd8 <main+0x37c>)
 8000888:	f003 fe00 	bl	800448c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	2214      	movs	r2, #20
 8000892:	49d2      	ldr	r1, [pc, #840]	; (8000bdc <main+0x380>)
 8000894:	48d0      	ldr	r0, [pc, #832]	; (8000bd8 <main+0x37c>)
 8000896:	f003 fe84 	bl	80045a2 <HAL_UART_Receive>
  HAL_Delay(3000);
 800089a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800089e:	f001 fd3f 	bl	8002320 <HAL_Delay>


  HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CWJAP=\"Geetansh Galaxy S23\",\"8076251649\"\r\n", sizeof("AT+CWJAP=\"Geetansh Galaxy S23\",\"8076251649\"\r\n"), 1000);
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	222e      	movs	r2, #46	; 0x2e
 80008a8:	49cd      	ldr	r1, [pc, #820]	; (8000be0 <main+0x384>)
 80008aa:	48cb      	ldr	r0, [pc, #812]	; (8000bd8 <main+0x37c>)
 80008ac:	f003 fdee 	bl	800448c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 80008b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b4:	2214      	movs	r2, #20
 80008b6:	49c9      	ldr	r1, [pc, #804]	; (8000bdc <main+0x380>)
 80008b8:	48c7      	ldr	r0, [pc, #796]	; (8000bd8 <main+0x37c>)
 80008ba:	f003 fe72 	bl	80045a2 <HAL_UART_Receive>


  airq5_init();
 80008be:	f000 fd4c 	bl	800135a <airq5_init>
  ens160_Init();
 80008c2:	f7ff ff45 	bl	8000750 <ens160_Init>
  ZPH03_Init();
 80008c6:	f7ff fe99 	bl	80005fc <ZPH03_Init>
  SSD1306_Init();  // initialise
 80008ca:	f001 f811 	bl	80018f0 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 f977 	bl	8001bc4 <SSD1306_GotoXY>
  SSD1306_Puts ("Please Wait", &Font_11x18, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	49c2      	ldr	r1, [pc, #776]	; (8000be4 <main+0x388>)
 80008da:	48c3      	ldr	r0, [pc, #780]	; (8000be8 <main+0x38c>)
 80008dc:	f001 fa08 	bl	8001cf0 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80008e0:	f001 f8ca 	bl	8001a78 <SSD1306_UpdateScreen>

  HAL_Delay(30000);
 80008e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80008e8:	f001 fd1a 	bl	8002320 <HAL_Delay>
  while (1)
  {

		 //--------------------------------GET THE DATA--------------------------------

		 NO2_ppb =  getNO2_ppb();
 80008ec:	f000 fecc 	bl	8001688 <getNO2_ppb>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4bbd      	ldr	r3, [pc, #756]	; (8000bec <main+0x390>)
 80008f6:	801a      	strh	r2, [r3, #0]
		 NO2_AQI =  getNO2_AQI();
 80008f8:	f000 fee2 	bl	80016c0 <getNO2_AQI>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4bbb      	ldr	r3, [pc, #748]	; (8000bf0 <main+0x394>)
 8000902:	801a      	strh	r2, [r3, #0]
		 CO_ppm  =  getCO_ppm();
 8000904:	f000 fefa 	bl	80016fc <getCO_ppm>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4bb9      	ldr	r3, [pc, #740]	; (8000bf4 <main+0x398>)
 800090e:	801a      	strh	r2, [r3, #0]
		 CO_AQI  =  getCO_aqi();
 8000910:	f000 ff10 	bl	8001734 <getCO_aqi>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4bb7      	ldr	r3, [pc, #732]	; (8000bf8 <main+0x39c>)
 800091a:	801a      	strh	r2, [r3, #0]


		 CO2_ppm = ens_getCO2_PPM();
 800091c:	f7ff ff32 	bl	8000784 <ens_getCO2_PPM>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4bb5      	ldr	r3, [pc, #724]	; (8000bfc <main+0x3a0>)
 8000926:	801a      	strh	r2, [r3, #0]

		 strcpy(CO2_Quality, (ens_getCO2_Quality(CO2_ppm)));
 8000928:	4bb4      	ldr	r3, [pc, #720]	; (8000bfc <main+0x3a0>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5b 	bl	80007e8 <ens_getCO2_Quality>
 8000932:	4603      	mov	r3, r0
 8000934:	4619      	mov	r1, r3
 8000936:	48b2      	ldr	r0, [pc, #712]	; (8000c00 <main+0x3a4>)
 8000938:	f004 faaa 	bl	8004e90 <strcpy>

		 strcpy(Temperature, (sht_getTemp()));
 800093c:	f000 ff0e 	bl	800175c <sht_getTemp>
 8000940:	4603      	mov	r3, r0
 8000942:	4619      	mov	r1, r3
 8000944:	48af      	ldr	r0, [pc, #700]	; (8000c04 <main+0x3a8>)
 8000946:	f004 faa3 	bl	8004e90 <strcpy>
		 strcpy(Humidity, (sht_getHumidity()));
 800094a:	f000 ff63 	bl	8001814 <sht_getHumidity>
 800094e:	4603      	mov	r3, r0
 8000950:	4619      	mov	r1, r3
 8000952:	48ad      	ldr	r0, [pc, #692]	; (8000c08 <main+0x3ac>)
 8000954:	f004 fa9c 	bl	8004e90 <strcpy>

		 pm_2_5 = ZPH03_PM_2_5();
 8000958:	f7ff fe60 	bl	800061c <ZPH03_PM_2_5>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4baa      	ldr	r3, [pc, #680]	; (8000c0c <main+0x3b0>)
 8000962:	801a      	strh	r2, [r3, #0]
		 pm_10 	= ZPH03_PM_10();
 8000964:	f7ff fe82 	bl	800066c <ZPH03_PM_10>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4ba8      	ldr	r3, [pc, #672]	; (8000c10 <main+0x3b4>)
 800096e:	801a      	strh	r2, [r3, #0]

		 PM_2_5_subIndex = ZPH03_pm_2_5_getSubindex();
 8000970:	f7ff fea4 	bl	80006bc <ZPH03_pm_2_5_getSubindex>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4ba6      	ldr	r3, [pc, #664]	; (8000c14 <main+0x3b8>)
 800097a:	801a      	strh	r2, [r3, #0]
		 PM_10_subIndex  = ZPH03_pm_2_5_getSubindex();
 800097c:	f7ff fe9e 	bl	80006bc <ZPH03_pm_2_5_getSubindex>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4ba4      	ldr	r3, [pc, #656]	; (8000c18 <main+0x3bc>)
 8000986:	801a      	strh	r2, [r3, #0]

		 finalAQI = get_Actual_AQI(NO2_AQI, CO_AQI, PM_2_5_subIndex, PM_10_subIndex);
 8000988:	4b99      	ldr	r3, [pc, #612]	; (8000bf0 <main+0x394>)
 800098a:	8818      	ldrh	r0, [r3, #0]
 800098c:	4b9a      	ldr	r3, [pc, #616]	; (8000bf8 <main+0x39c>)
 800098e:	8819      	ldrh	r1, [r3, #0]
 8000990:	4ba0      	ldr	r3, [pc, #640]	; (8000c14 <main+0x3b8>)
 8000992:	881a      	ldrh	r2, [r3, #0]
 8000994:	4ba0      	ldr	r3, [pc, #640]	; (8000c18 <main+0x3bc>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	f7ff fdf0 	bl	800057c <get_Actual_AQI>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b9e      	ldr	r3, [pc, #632]	; (8000c1c <main+0x3c0>)
 80009a2:	801a      	strh	r2, [r3, #0]
		 //--------------------------------DISPLAY THE DATA--------------------------------

		 //Convert Integer To string

		  	char pm2_5_buf[5];
		  	itoa(pm_2_5, pm2_5_buf, 10);
 80009a4:	4b99      	ldr	r3, [pc, #612]	; (8000c0c <main+0x3b0>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	220a      	movs	r2, #10
 80009b0:	4619      	mov	r1, r3
 80009b2:	f004 f9d5 	bl	8004d60 <itoa>

			char pm10_buf[5];
			itoa(pm_10, pm10_buf, 10);
 80009b6:	4b96      	ldr	r3, [pc, #600]	; (8000c10 <main+0x3b4>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	220a      	movs	r2, #10
 80009c2:	4619      	mov	r1, r3
 80009c4:	f004 f9cc 	bl	8004d60 <itoa>

			char co_buf[5];
			itoa(CO_ppm, co_buf, 10);
 80009c8:	4b8a      	ldr	r3, [pc, #552]	; (8000bf4 <main+0x398>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	220a      	movs	r2, #10
 80009d4:	4619      	mov	r1, r3
 80009d6:	f004 f9c3 	bl	8004d60 <itoa>

			char no2_buf[5];
			itoa(NO2_ppb, no2_buf, 10);
 80009da:	4b84      	ldr	r3, [pc, #528]	; (8000bec <main+0x390>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	220a      	movs	r2, #10
 80009e6:	4619      	mov	r1, r3
 80009e8:	f004 f9ba 	bl	8004d60 <itoa>


		  	char masterAQI[5];
		  	itoa(finalAQI, masterAQI, 10);
 80009ec:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <main+0x3c0>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	220a      	movs	r2, #10
 80009f6:	4619      	mov	r1, r3
 80009f8:	f004 f9b2 	bl	8004d60 <itoa>

		  	SSD1306_Clear();
 80009fc:	f001 f99d 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (30,0);
 8000a00:	2100      	movs	r1, #0
 8000a02:	201e      	movs	r0, #30
 8000a04:	f001 f8de 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("AQI ", &Font_16x26, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4985      	ldr	r1, [pc, #532]	; (8000c20 <main+0x3c4>)
 8000a0c:	4885      	ldr	r0, [pc, #532]	; (8000c24 <main+0x3c8>)
 8000a0e:	f001 f96f 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,30);
 8000a12:	211e      	movs	r1, #30
 8000a14:	201e      	movs	r0, #30
 8000a16:	f001 f8d5 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (masterAQI, &Font_16x26, 1);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4980      	ldr	r1, [pc, #512]	; (8000c20 <main+0x3c4>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f965 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000a26:	f001 f827 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000a2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a2e:	f001 fc77 	bl	8002320 <HAL_Delay>

		  	SSD1306_Clear();
 8000a32:	f001 f982 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (30,0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	201e      	movs	r0, #30
 8000a3a:	f001 f8c3 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("PM 2.5", &Font_11x18, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4968      	ldr	r1, [pc, #416]	; (8000be4 <main+0x388>)
 8000a42:	4879      	ldr	r0, [pc, #484]	; (8000c28 <main+0x3cc>)
 8000a44:	f001 f954 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,20);
 8000a48:	2114      	movs	r1, #20
 8000a4a:	201e      	movs	r0, #30
 8000a4c:	f001 f8ba 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (pm2_5_buf, &Font_11x18, 1);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	2201      	movs	r2, #1
 8000a56:	4963      	ldr	r1, [pc, #396]	; (8000be4 <main+0x388>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f949 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,40);
 8000a5e:	2128      	movs	r1, #40	; 0x28
 8000a60:	201e      	movs	r0, #30
 8000a62:	f001 f8af 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("ug/m3", &Font_11x18, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	495e      	ldr	r1, [pc, #376]	; (8000be4 <main+0x388>)
 8000a6a:	4870      	ldr	r0, [pc, #448]	; (8000c2c <main+0x3d0>)
 8000a6c:	f001 f940 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000a70:	f001 f802 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000a74:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a78:	f001 fc52 	bl	8002320 <HAL_Delay>

		  	SSD1306_Clear();
 8000a7c:	f001 f95d 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (30,0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	201e      	movs	r0, #30
 8000a84:	f001 f89e 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("PM 10", &Font_11x18, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4956      	ldr	r1, [pc, #344]	; (8000be4 <main+0x388>)
 8000a8c:	4868      	ldr	r0, [pc, #416]	; (8000c30 <main+0x3d4>)
 8000a8e:	f001 f92f 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,20);
 8000a92:	2114      	movs	r1, #20
 8000a94:	201e      	movs	r0, #30
 8000a96:	f001 f895 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (pm10_buf, &Font_11x18, 1);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4950      	ldr	r1, [pc, #320]	; (8000be4 <main+0x388>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f924 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,40);
 8000aa8:	2128      	movs	r1, #40	; 0x28
 8000aaa:	201e      	movs	r0, #30
 8000aac:	f001 f88a 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("ug/m3", &Font_11x18, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	494c      	ldr	r1, [pc, #304]	; (8000be4 <main+0x388>)
 8000ab4:	485d      	ldr	r0, [pc, #372]	; (8000c2c <main+0x3d0>)
 8000ab6:	f001 f91b 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000aba:	f000 ffdd 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000abe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ac2:	f001 fc2d 	bl	8002320 <HAL_Delay>

		  	SSD1306_Clear();
 8000ac6:	f001 f938 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (30,0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	201e      	movs	r0, #30
 8000ace:	f001 f879 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("CO gas", &Font_11x18, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4943      	ldr	r1, [pc, #268]	; (8000be4 <main+0x388>)
 8000ad6:	4857      	ldr	r0, [pc, #348]	; (8000c34 <main+0x3d8>)
 8000ad8:	f001 f90a 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,20);
 8000adc:	2114      	movs	r1, #20
 8000ade:	201e      	movs	r0, #30
 8000ae0:	f001 f870 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (co_buf, &Font_11x18, 1);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2201      	movs	r2, #1
 8000aea:	493e      	ldr	r1, [pc, #248]	; (8000be4 <main+0x388>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f8ff 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,40);
 8000af2:	2128      	movs	r1, #40	; 0x28
 8000af4:	201e      	movs	r0, #30
 8000af6:	f001 f865 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("PPM", &Font_11x18, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	4939      	ldr	r1, [pc, #228]	; (8000be4 <main+0x388>)
 8000afe:	484e      	ldr	r0, [pc, #312]	; (8000c38 <main+0x3dc>)
 8000b00:	f001 f8f6 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000b04:	f000 ffb8 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000b08:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b0c:	f001 fc08 	bl	8002320 <HAL_Delay>

		  	SSD1306_Clear();
 8000b10:	f001 f913 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (30,0);
 8000b14:	2100      	movs	r1, #0
 8000b16:	201e      	movs	r0, #30
 8000b18:	f001 f854 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("NO2", &Font_11x18, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4931      	ldr	r1, [pc, #196]	; (8000be4 <main+0x388>)
 8000b20:	4846      	ldr	r0, [pc, #280]	; (8000c3c <main+0x3e0>)
 8000b22:	f001 f8e5 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,20);
 8000b26:	2114      	movs	r1, #20
 8000b28:	201e      	movs	r0, #30
 8000b2a:	f001 f84b 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (no2_buf, &Font_11x18, 1);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2201      	movs	r2, #1
 8000b34:	492b      	ldr	r1, [pc, #172]	; (8000be4 <main+0x388>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f8da 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (30,40);
 8000b3c:	2128      	movs	r1, #40	; 0x28
 8000b3e:	201e      	movs	r0, #30
 8000b40:	f001 f840 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("PPB", &Font_11x18, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	4927      	ldr	r1, [pc, #156]	; (8000be4 <main+0x388>)
 8000b48:	483d      	ldr	r0, [pc, #244]	; (8000c40 <main+0x3e4>)
 8000b4a:	f001 f8d1 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000b4e:	f000 ff93 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000b52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b56:	f001 fbe3 	bl	8002320 <HAL_Delay>


		  	SSD1306_Clear();
 8000b5a:	f001 f8ee 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (0,0);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f001 f82f 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("CO2 Quality", &Font_11x18, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	491e      	ldr	r1, [pc, #120]	; (8000be4 <main+0x388>)
 8000b6a:	4836      	ldr	r0, [pc, #216]	; (8000c44 <main+0x3e8>)
 8000b6c:	f001 f8c0 	bl	8001cf0 <SSD1306_Puts>

		    SSD1306_GotoXY (0,30);
 8000b70:	211e      	movs	r1, #30
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 f826 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (CO2_Quality, &Font_11x18, 1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	491a      	ldr	r1, [pc, #104]	; (8000be4 <main+0x388>)
 8000b7c:	4820      	ldr	r0, [pc, #128]	; (8000c00 <main+0x3a4>)
 8000b7e:	f001 f8b7 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000b82:	f000 ff79 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000b86:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b8a:	f001 fbc9 	bl	8002320 <HAL_Delay>

		  	SSD1306_Clear();
 8000b8e:	f001 f8d4 	bl	8001d3a <SSD1306_Clear>
		    SSD1306_GotoXY (0,0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f001 f815 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts ("Temp :", &Font_11x18, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4911      	ldr	r1, [pc, #68]	; (8000be4 <main+0x388>)
 8000b9e:	482a      	ldr	r0, [pc, #168]	; (8000c48 <main+0x3ec>)
 8000ba0:	f001 f8a6 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_GotoXY (50,0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2032      	movs	r0, #50	; 0x32
 8000ba8:	f001 f80c 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (Temperature, &Font_11x18, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <main+0x388>)
 8000bb0:	4814      	ldr	r0, [pc, #80]	; (8000c04 <main+0x3a8>)
 8000bb2:	f001 f89d 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_GotoXY (80,0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2050      	movs	r0, #80	; 0x50
 8000bba:	f001 f803 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (" C", &Font_11x18, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4908      	ldr	r1, [pc, #32]	; (8000be4 <main+0x388>)
 8000bc2:	4822      	ldr	r0, [pc, #136]	; (8000c4c <main+0x3f0>)
 8000bc4:	f001 f894 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_GotoXY (0,30);
 8000bc8:	211e      	movs	r1, #30
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fffa 	bl	8001bc4 <SSD1306_GotoXY>
 8000bd0:	e03e      	b.n	8000c50 <main+0x3f4>
 8000bd2:	bf00      	nop
 8000bd4:	08005774 	.word	0x08005774
 8000bd8:	200007f0 	.word	0x200007f0
 8000bdc:	200000f0 	.word	0x200000f0
 8000be0:	08005780 	.word	0x08005780
 8000be4:	20000018 	.word	0x20000018
 8000be8:	080057b0 	.word	0x080057b0
 8000bec:	20000838 	.word	0x20000838
 8000bf0:	200007ec 	.word	0x200007ec
 8000bf4:	2000083c 	.word	0x2000083c
 8000bf8:	200007e8 	.word	0x200007e8
 8000bfc:	200007ea 	.word	0x200007ea
 8000c00:	200000dc 	.word	0x200000dc
 8000c04:	200000e8 	.word	0x200000e8
 8000c08:	200000ec 	.word	0x200000ec
 8000c0c:	200000ca 	.word	0x200000ca
 8000c10:	200000cc 	.word	0x200000cc
 8000c14:	2000083e 	.word	0x2000083e
 8000c18:	20000792 	.word	0x20000792
 8000c1c:	200000da 	.word	0x200000da
 8000c20:	20000020 	.word	0x20000020
 8000c24:	080057bc 	.word	0x080057bc
 8000c28:	080057c4 	.word	0x080057c4
 8000c2c:	080057cc 	.word	0x080057cc
 8000c30:	080057d4 	.word	0x080057d4
 8000c34:	080057dc 	.word	0x080057dc
 8000c38:	080057e4 	.word	0x080057e4
 8000c3c:	080057e8 	.word	0x080057e8
 8000c40:	080057ec 	.word	0x080057ec
 8000c44:	080057f0 	.word	0x080057f0
 8000c48:	080057fc 	.word	0x080057fc
 8000c4c:	08005804 	.word	0x08005804
		    SSD1306_Puts ("RH", &Font_11x18, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	49c5      	ldr	r1, [pc, #788]	; (8000f68 <main+0x70c>)
 8000c54:	48c5      	ldr	r0, [pc, #788]	; (8000f6c <main+0x710>)
 8000c56:	f001 f84b 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_GotoXY (50,30);
 8000c5a:	211e      	movs	r1, #30
 8000c5c:	2032      	movs	r0, #50	; 0x32
 8000c5e:	f000 ffb1 	bl	8001bc4 <SSD1306_GotoXY>
		    SSD1306_Puts (Humidity, &Font_11x18, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	49c0      	ldr	r1, [pc, #768]	; (8000f68 <main+0x70c>)
 8000c66:	48c2      	ldr	r0, [pc, #776]	; (8000f70 <main+0x714>)
 8000c68:	f001 f842 	bl	8001cf0 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 8000c6c:	f000 ff04 	bl	8001a78 <SSD1306_UpdateScreen>

		    HAL_Delay(5000);
 8000c70:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c74:	f001 fb54 	bl	8002320 <HAL_Delay>


			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	222c      	movs	r2, #44	; 0x2c
 8000c7e:	49bd      	ldr	r1, [pc, #756]	; (8000f74 <main+0x718>)
 8000c80:	48bd      	ldr	r0, [pc, #756]	; (8000f78 <main+0x71c>)
 8000c82:	f003 fc03 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	2214      	movs	r2, #20
 8000c8c:	49bb      	ldr	r1, [pc, #748]	; (8000f7c <main+0x720>)
 8000c8e:	48ba      	ldr	r0, [pc, #744]	; (8000f78 <main+0x71c>)
 8000c90:	f003 fc87 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000c94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c98:	f001 fb42 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSEND=51\r\n", sizeof("AT+CIPSEND=51\r\n"), 1000);
 8000c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	49b7      	ldr	r1, [pc, #732]	; (8000f80 <main+0x724>)
 8000ca4:	48b4      	ldr	r0, [pc, #720]	; (8000f78 <main+0x71c>)
 8000ca6:	f003 fbf1 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	2214      	movs	r2, #20
 8000cb0:	49b2      	ldr	r1, [pc, #712]	; (8000f7c <main+0x720>)
 8000cb2:	48b1      	ldr	r0, [pc, #708]	; (8000f78 <main+0x71c>)
 8000cb4:	f003 fc75 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000cb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cbc:	f001 fb30 	bl	8002320 <HAL_Delay>

			sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", key, 1, finalAQI);
 8000cc0:	4bb0      	ldr	r3, [pc, #704]	; (8000f84 <main+0x728>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4aaf      	ldr	r2, [pc, #700]	; (8000f88 <main+0x72c>)
 8000cca:	49b0      	ldr	r1, [pc, #704]	; (8000f8c <main+0x730>)
 8000ccc:	48b0      	ldr	r0, [pc, #704]	; (8000f90 <main+0x734>)
 8000cce:	f004 f88b 	bl	8004de8 <siprintf>
			int len = strlen (local_buf);
 8000cd2:	48af      	ldr	r0, [pc, #700]	; (8000f90 <main+0x734>)
 8000cd4:	f7ff fa7c 	bl	80001d0 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_UART_Transmit(&huart5, (uint8_t*)local_buf, len, 1000);
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	49aa      	ldr	r1, [pc, #680]	; (8000f90 <main+0x734>)
 8000ce6:	48a4      	ldr	r0, [pc, #656]	; (8000f78 <main+0x71c>)
 8000ce8:	f003 fbd0 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	2214      	movs	r2, #20
 8000cf2:	49a2      	ldr	r1, [pc, #648]	; (8000f7c <main+0x720>)
 8000cf4:	48a0      	ldr	r0, [pc, #640]	; (8000f78 <main+0x71c>)
 8000cf6:	f003 fc54 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(8000);
 8000cfa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000cfe:	f001 fb0f 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n"), 1000);
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	220e      	movs	r2, #14
 8000d08:	49a2      	ldr	r1, [pc, #648]	; (8000f94 <main+0x738>)
 8000d0a:	489b      	ldr	r0, [pc, #620]	; (8000f78 <main+0x71c>)
 8000d0c:	f003 fbbe 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	2214      	movs	r2, #20
 8000d16:	4999      	ldr	r1, [pc, #612]	; (8000f7c <main+0x720>)
 8000d18:	4897      	ldr	r0, [pc, #604]	; (8000f78 <main+0x71c>)
 8000d1a:	f003 fc42 	bl	80045a2 <HAL_UART_Receive>
		    HAL_Delay(8000);
 8000d1e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000d22:	f001 fafd 	bl	8002320 <HAL_Delay>
			/*___________________________________________________________________________________________________________________________________________________________________________*/
			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	222c      	movs	r2, #44	; 0x2c
 8000d2c:	4991      	ldr	r1, [pc, #580]	; (8000f74 <main+0x718>)
 8000d2e:	4892      	ldr	r0, [pc, #584]	; (8000f78 <main+0x71c>)
 8000d30:	f003 fbac 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	2214      	movs	r2, #20
 8000d3a:	4990      	ldr	r1, [pc, #576]	; (8000f7c <main+0x720>)
 8000d3c:	488e      	ldr	r0, [pc, #568]	; (8000f78 <main+0x71c>)
 8000d3e:	f003 fc30 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000d42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d46:	f001 faeb 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSEND=51\r\n", sizeof("AT+CIPSEND=51\r\n"), 1000);
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	2210      	movs	r2, #16
 8000d50:	498b      	ldr	r1, [pc, #556]	; (8000f80 <main+0x724>)
 8000d52:	4889      	ldr	r0, [pc, #548]	; (8000f78 <main+0x71c>)
 8000d54:	f003 fb9a 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	2214      	movs	r2, #20
 8000d5e:	4987      	ldr	r1, [pc, #540]	; (8000f7c <main+0x720>)
 8000d60:	4885      	ldr	r0, [pc, #532]	; (8000f78 <main+0x71c>)
 8000d62:	f003 fc1e 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000d66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d6a:	f001 fad9 	bl	8002320 <HAL_Delay>

			sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", key, 2, pm_2_5);
 8000d6e:	4b8a      	ldr	r3, [pc, #552]	; (8000f98 <main+0x73c>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2302      	movs	r3, #2
 8000d76:	4a84      	ldr	r2, [pc, #528]	; (8000f88 <main+0x72c>)
 8000d78:	4984      	ldr	r1, [pc, #528]	; (8000f8c <main+0x730>)
 8000d7a:	4885      	ldr	r0, [pc, #532]	; (8000f90 <main+0x734>)
 8000d7c:	f004 f834 	bl	8004de8 <siprintf>
			 len = strlen (local_buf);
 8000d80:	4883      	ldr	r0, [pc, #524]	; (8000f90 <main+0x734>)
 8000d82:	f7ff fa25 	bl	80001d0 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_UART_Transmit(&huart5, (uint8_t*)local_buf, len, 1000);
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	497f      	ldr	r1, [pc, #508]	; (8000f90 <main+0x734>)
 8000d94:	4878      	ldr	r0, [pc, #480]	; (8000f78 <main+0x71c>)
 8000d96:	f003 fb79 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	2214      	movs	r2, #20
 8000da0:	4976      	ldr	r1, [pc, #472]	; (8000f7c <main+0x720>)
 8000da2:	4875      	ldr	r0, [pc, #468]	; (8000f78 <main+0x71c>)
 8000da4:	f003 fbfd 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(8000);
 8000da8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000dac:	f001 fab8 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n"), 1000);
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	220e      	movs	r2, #14
 8000db6:	4977      	ldr	r1, [pc, #476]	; (8000f94 <main+0x738>)
 8000db8:	486f      	ldr	r0, [pc, #444]	; (8000f78 <main+0x71c>)
 8000dba:	f003 fb67 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	2214      	movs	r2, #20
 8000dc4:	496d      	ldr	r1, [pc, #436]	; (8000f7c <main+0x720>)
 8000dc6:	486c      	ldr	r0, [pc, #432]	; (8000f78 <main+0x71c>)
 8000dc8:	f003 fbeb 	bl	80045a2 <HAL_UART_Receive>
		    HAL_Delay(8000);
 8000dcc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000dd0:	f001 faa6 	bl	8002320 <HAL_Delay>
			/*___________________________________________________________________________________________________________________________________________________________________________*/
			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd8:	222c      	movs	r2, #44	; 0x2c
 8000dda:	4966      	ldr	r1, [pc, #408]	; (8000f74 <main+0x718>)
 8000ddc:	4866      	ldr	r0, [pc, #408]	; (8000f78 <main+0x71c>)
 8000dde:	f003 fb55 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	2214      	movs	r2, #20
 8000de8:	4964      	ldr	r1, [pc, #400]	; (8000f7c <main+0x720>)
 8000dea:	4863      	ldr	r0, [pc, #396]	; (8000f78 <main+0x71c>)
 8000dec:	f003 fbd9 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000df0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000df4:	f001 fa94 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSEND=51\r\n", sizeof("AT+CIPSEND=51\r\n"), 1000);
 8000df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	4960      	ldr	r1, [pc, #384]	; (8000f80 <main+0x724>)
 8000e00:	485d      	ldr	r0, [pc, #372]	; (8000f78 <main+0x71c>)
 8000e02:	f003 fb43 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	495b      	ldr	r1, [pc, #364]	; (8000f7c <main+0x720>)
 8000e0e:	485a      	ldr	r0, [pc, #360]	; (8000f78 <main+0x71c>)
 8000e10:	f003 fbc7 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000e14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e18:	f001 fa82 	bl	8002320 <HAL_Delay>

			sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", key, 3, pm_10);
 8000e1c:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <main+0x740>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2303      	movs	r3, #3
 8000e24:	4a58      	ldr	r2, [pc, #352]	; (8000f88 <main+0x72c>)
 8000e26:	4959      	ldr	r1, [pc, #356]	; (8000f8c <main+0x730>)
 8000e28:	4859      	ldr	r0, [pc, #356]	; (8000f90 <main+0x734>)
 8000e2a:	f003 ffdd 	bl	8004de8 <siprintf>
			 len = strlen (local_buf);
 8000e2e:	4858      	ldr	r0, [pc, #352]	; (8000f90 <main+0x734>)
 8000e30:	f7ff f9ce 	bl	80001d0 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_UART_Transmit(&huart5, (uint8_t*)local_buf, len, 1000);
 8000e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e40:	4953      	ldr	r1, [pc, #332]	; (8000f90 <main+0x734>)
 8000e42:	484d      	ldr	r0, [pc, #308]	; (8000f78 <main+0x71c>)
 8000e44:	f003 fb22 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	2214      	movs	r2, #20
 8000e4e:	494b      	ldr	r1, [pc, #300]	; (8000f7c <main+0x720>)
 8000e50:	4849      	ldr	r0, [pc, #292]	; (8000f78 <main+0x71c>)
 8000e52:	f003 fba6 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(8000);
 8000e56:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000e5a:	f001 fa61 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n"), 1000);
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	220e      	movs	r2, #14
 8000e64:	494b      	ldr	r1, [pc, #300]	; (8000f94 <main+0x738>)
 8000e66:	4844      	ldr	r0, [pc, #272]	; (8000f78 <main+0x71c>)
 8000e68:	f003 fb10 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	2214      	movs	r2, #20
 8000e72:	4942      	ldr	r1, [pc, #264]	; (8000f7c <main+0x720>)
 8000e74:	4840      	ldr	r0, [pc, #256]	; (8000f78 <main+0x71c>)
 8000e76:	f003 fb94 	bl	80045a2 <HAL_UART_Receive>
		    HAL_Delay(8000);
 8000e7a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000e7e:	f001 fa4f 	bl	8002320 <HAL_Delay>
			/*___________________________________________________________________________________________________________________________________________________________________________*/
			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	222c      	movs	r2, #44	; 0x2c
 8000e88:	493a      	ldr	r1, [pc, #232]	; (8000f74 <main+0x718>)
 8000e8a:	483b      	ldr	r0, [pc, #236]	; (8000f78 <main+0x71c>)
 8000e8c:	f003 fafe 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	2214      	movs	r2, #20
 8000e96:	4939      	ldr	r1, [pc, #228]	; (8000f7c <main+0x720>)
 8000e98:	4837      	ldr	r0, [pc, #220]	; (8000f78 <main+0x71c>)
 8000e9a:	f003 fb82 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000e9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ea2:	f001 fa3d 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSEND=51\r\n", sizeof("AT+CIPSEND=51\r\n"), 1000);
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	2210      	movs	r2, #16
 8000eac:	4934      	ldr	r1, [pc, #208]	; (8000f80 <main+0x724>)
 8000eae:	4832      	ldr	r0, [pc, #200]	; (8000f78 <main+0x71c>)
 8000eb0:	f003 faec 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	2214      	movs	r2, #20
 8000eba:	4930      	ldr	r1, [pc, #192]	; (8000f7c <main+0x720>)
 8000ebc:	482e      	ldr	r0, [pc, #184]	; (8000f78 <main+0x71c>)
 8000ebe:	f003 fb70 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000ec2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ec6:	f001 fa2b 	bl	8002320 <HAL_Delay>

			sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", key, 4, CO_ppm);
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <main+0x744>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <main+0x72c>)
 8000ed4:	492d      	ldr	r1, [pc, #180]	; (8000f8c <main+0x730>)
 8000ed6:	482e      	ldr	r0, [pc, #184]	; (8000f90 <main+0x734>)
 8000ed8:	f003 ff86 	bl	8004de8 <siprintf>
			 len = strlen (local_buf);
 8000edc:	482c      	ldr	r0, [pc, #176]	; (8000f90 <main+0x734>)
 8000ede:	f7ff f977 	bl	80001d0 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_UART_Transmit(&huart5, (uint8_t*)local_buf, len, 1000);
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	4928      	ldr	r1, [pc, #160]	; (8000f90 <main+0x734>)
 8000ef0:	4821      	ldr	r0, [pc, #132]	; (8000f78 <main+0x71c>)
 8000ef2:	f003 facb 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	2214      	movs	r2, #20
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <main+0x720>)
 8000efe:	481e      	ldr	r0, [pc, #120]	; (8000f78 <main+0x71c>)
 8000f00:	f003 fb4f 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(8000);
 8000f04:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f08:	f001 fa0a 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n"), 1000);
 8000f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f10:	220e      	movs	r2, #14
 8000f12:	4920      	ldr	r1, [pc, #128]	; (8000f94 <main+0x738>)
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <main+0x71c>)
 8000f16:	f003 fab9 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	2214      	movs	r2, #20
 8000f20:	4916      	ldr	r1, [pc, #88]	; (8000f7c <main+0x720>)
 8000f22:	4815      	ldr	r0, [pc, #84]	; (8000f78 <main+0x71c>)
 8000f24:	f003 fb3d 	bl	80045a2 <HAL_UART_Receive>
		    HAL_Delay(8000);
 8000f28:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f2c:	f001 f9f8 	bl	8002320 <HAL_Delay>
			/*___________________________________________________________________________________________________________________________________________________________________________*/
			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	222c      	movs	r2, #44	; 0x2c
 8000f36:	490f      	ldr	r1, [pc, #60]	; (8000f74 <main+0x718>)
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <main+0x71c>)
 8000f3a:	f003 faa7 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	2214      	movs	r2, #20
 8000f44:	490d      	ldr	r1, [pc, #52]	; (8000f7c <main+0x720>)
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <main+0x71c>)
 8000f48:	f003 fb2b 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000f4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f50:	f001 f9e6 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPSEND=51\r\n", sizeof("AT+CIPSEND=51\r\n"), 1000);
 8000f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f58:	2210      	movs	r2, #16
 8000f5a:	4909      	ldr	r1, [pc, #36]	; (8000f80 <main+0x724>)
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <main+0x71c>)
 8000f5e:	f003 fa95 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	e01d      	b.n	8000fa4 <main+0x748>
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	08005808 	.word	0x08005808
 8000f70:	200000ec 	.word	0x200000ec
 8000f74:	0800580c 	.word	0x0800580c
 8000f78:	200007f0 	.word	0x200007f0
 8000f7c:	200000f0 	.word	0x200000f0
 8000f80:	08005838 	.word	0x08005838
 8000f84:	200000da 	.word	0x200000da
 8000f88:	20000028 	.word	0x20000028
 8000f8c:	08005848 	.word	0x08005848
 8000f90:	20000104 	.word	0x20000104
 8000f94:	0800586c 	.word	0x0800586c
 8000f98:	200000ca 	.word	0x200000ca
 8000f9c:	200000cc 	.word	0x200000cc
 8000fa0:	2000083c 	.word	0x2000083c
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	491c      	ldr	r1, [pc, #112]	; (8001018 <main+0x7bc>)
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <main+0x7c0>)
 8000faa:	f003 fafa 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(3000);
 8000fae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb2:	f001 f9b5 	bl	8002320 <HAL_Delay>

			sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", key, 5, NO2_ppb);
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <main+0x7c4>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <main+0x7c8>)
 8000fc0:	4919      	ldr	r1, [pc, #100]	; (8001028 <main+0x7cc>)
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <main+0x7d0>)
 8000fc4:	f003 ff10 	bl	8004de8 <siprintf>
			 len = strlen (local_buf);
 8000fc8:	4818      	ldr	r0, [pc, #96]	; (800102c <main+0x7d0>)
 8000fca:	f7ff f901 	bl	80001d0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			HAL_UART_Transmit(&huart5, (uint8_t*)local_buf, len, 1000);
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	4914      	ldr	r1, [pc, #80]	; (800102c <main+0x7d0>)
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <main+0x7c0>)
 8000fde:	f003 fa55 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	2214      	movs	r2, #20
 8000fe8:	490b      	ldr	r1, [pc, #44]	; (8001018 <main+0x7bc>)
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <main+0x7c0>)
 8000fec:	f003 fad9 	bl	80045a2 <HAL_UART_Receive>
			HAL_Delay(8000);
 8000ff0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ff4:	f001 f994 	bl	8002320 <HAL_Delay>

			HAL_UART_Transmit(&huart5, (uint8_t*)"AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n"), 1000);
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	490c      	ldr	r1, [pc, #48]	; (8001030 <main+0x7d4>)
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <main+0x7c0>)
 8001002:	f003 fa43 	bl	800448c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart5, (uint8_t*)atrespond, sizeof(atrespond), 1000);
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	2214      	movs	r2, #20
 800100c:	4902      	ldr	r1, [pc, #8]	; (8001018 <main+0x7bc>)
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <main+0x7c0>)
 8001010:	f003 fac7 	bl	80045a2 <HAL_UART_Receive>
  {
 8001014:	e46a      	b.n	80008ec <main+0x90>
 8001016:	bf00      	nop
 8001018:	200000f0 	.word	0x200000f0
 800101c:	200007f0 	.word	0x200007f0
 8001020:	20000838 	.word	0x20000838
 8001024:	20000028 	.word	0x20000028
 8001028:	08005848 	.word	0x08005848
 800102c:	20000104 	.word	0x20000104
 8001030:	0800586c 	.word	0x0800586c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fef0 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fcfe 	bl	8003abc <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010c6:	f000 f943 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2105      	movs	r1, #5
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 ff5f 	bl	8003fac <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f4:	f000 f92c 	bl	8001350 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	; 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f001 fb91 	bl	800286c <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f8fe 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000794 	.word	0x20000794
 800115c:	40005400 	.word	0x40005400
 8001160:	00061a80 	.word	0x00061a80

08001164 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C2_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_I2C2_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C2_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_I2C2_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C2_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_I2C2_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_I2C2_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_I2C2_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_I2C2_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_I2C2_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_I2C2_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_I2C2_Init+0x50>)
 80011a2:	f001 fb63 	bl	800286c <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 f8d0 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000718 	.word	0x20000718
 80011b8:	40005800 	.word	0x40005800
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_UART4_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_UART4_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_UART4_Init+0x4c>)
 80011cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_UART4_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_UART4_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_UART4_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_UART4_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_UART4_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_UART4_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_UART4_Init+0x4c>)
 80011f8:	f003 f8f8 	bl	80043ec <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8a5 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200006cc 	.word	0x200006cc
 8001210:	40004c00 	.word	0x40004c00

08001214 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_UART5_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_UART5_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_UART5_Init+0x4c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_UART5_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_UART5_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_UART5_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_UART5_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_UART5_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_UART5_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_UART5_Init+0x4c>)
 800124c:	f003 f8ce 	bl	80043ec <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f87b 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200007f0 	.word	0x200007f0
 8001264:	40005000 	.word	0x40005000

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <MX_GPIO_Init+0xe0>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <MX_GPIO_Init+0xe0>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_GPIO_Init+0xe0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0xe4>)
 800133a:	f001 f8fb 	bl	8002534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40021000 	.word	0x40021000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>

0800135a <airq5_init>:
 * @param[out] void
 * @note       none
 */

void airq5_init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
	  airq5_setConfiguration( _AIRQ5_CONFIG_OS_SINGLE |							//Start Single Shot Conversion
 800135e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	4313      	orrs	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	4313      	orrs	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	4313      	orrs	r3, r2
 8001376:	b29b      	uxth	r3, r3
 8001378:	2200      	movs	r2, #0
 800137a:	4313      	orrs	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	4313      	orrs	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	2200      	movs	r2, #0
 8001386:	4313      	orrs	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	2203      	movs	r2, #3
 800138c:	4313      	orrs	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f855 	bl	8001440 <airq5_setConfiguration>
	                              _AIRQ5_CONFIG_COMP_MODE_TRADITIONAL |			//Default Comparator Mode
	                              _AIRQ5_CONFIG_COMP_POL_ACTIVE_LOW |			//Polarity of ready pin for interrupt
	                              _AIRQ5_CONFIG_COMP_LAT_NOT_LATCH |			//Do not latch Ready Pin
	                              _AIRQ5_CONFIG_COMP_QUE_0CONV );				//Pull Ready pin high after one successful Reading

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <airq5_writeData>:
 * @param[out] void
 * @note       none
 */

void airq5_writeData(uint8_t reg, uint16_t _data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	80bb      	strh	r3, [r7, #4]
    uint8_t writeReg[ 3 ];

    writeReg[ 0 ] = reg;					//Register To write
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	733b      	strb	r3, [r7, #12]
    writeReg[ 1 ] = _data >> 8;				// Store MSB, MSB of data right shifted to eliminate LSB from 16 bit variable to accomodate into an 8 bit variable
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	737b      	strb	r3, [r7, #13]
    writeReg[ 2 ] = _data & 0x00FF;			//Store LSB, LSB & 0xFF = LSB,   MSB & 0x00 = 0x00
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Master_Transmit(&hi2c2, waddr, (uint8_t*)&writeReg, 3, HAL_MAX_DELAY);
 80013c0:	2390      	movs	r3, #144	; 0x90
 80013c2:	b299      	uxth	r1, r3
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2303      	movs	r3, #3
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <airq5_writeData+0x44>)
 80013d2:	f001 fb8f 	bl	8002af4 <HAL_I2C_Master_Transmit>


}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000718 	.word	0x20000718

080013e4 <airq5_readData>:
 * @param[out] ADC Voltage
 * @note       none
 */

uint16_t airq5_readData(uint8_t reg)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
    uint8_t writeReg[ 1 ];				//One byte Register Address
    uint8_t readReg[ 2 ];				//Two Bytes Return Value
    uint16_t dataValue;

    //Address of register to read data from
    writeReg[ 0 ] = reg;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Master_Transmit(&hi2c2, waddr, (uint8_t*)&writeReg, 1, HAL_MAX_DELAY);
 80013f2:	2390      	movs	r3, #144	; 0x90
 80013f4:	b299      	uxth	r1, r3
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <airq5_readData+0x58>)
 8001404:	f001 fb76 	bl	8002af4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2, raddr, (uint8_t*)&readReg, 2, HAL_MAX_DELAY);
 8001408:	2391      	movs	r3, #145	; 0x91
 800140a:	b299      	uxth	r1, r3
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2302      	movs	r3, #2
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <airq5_readData+0x58>)
 800141a:	f001 fc69 	bl	8002cf0 <HAL_I2C_Master_Receive>

    //Store Two 8 bit values into one 16 bit variable : Shift MSB to leftmost and bitwise or with LSB, Data right Aligned, Big Endian
    dataValue = readReg[ 0 ];
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	81fb      	strh	r3, [r7, #14]
    dataValue = dataValue << 8;
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	81fb      	strh	r3, [r7, #14]
    dataValue = dataValue | readReg[ 1 ];
 8001428:	7a7b      	ldrb	r3, [r7, #9]
 800142a:	b29a      	uxth	r2, r3
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	4313      	orrs	r3, r2
 8001430:	81fb      	strh	r3, [r7, #14]

    return dataValue;
 8001432:	89fb      	ldrh	r3, [r7, #14]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000718 	.word	0x20000718

08001440 <airq5_setConfiguration>:
 * @param[out] void
 * @note       none
 */

void airq5_setConfiguration(uint16_t config)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
	//Stores Data Configuration Values
    _dataConfig = config;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <airq5_setConfiguration+0x1c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	8013      	strh	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	2000003a 	.word	0x2000003a

08001460 <airq5_readSensorData>:
 * @param[out] Voltage
 * @note       none
 */

uint16_t airq5_readSensorData(uint16_t channel_data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
    uint16_t setConfig;
    uint16_t getData;

    //Get ADC Config Data
    setConfig = _dataConfig;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <airq5_readSensorData+0x40>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	81fb      	strh	r3, [r7, #14]

    //Combine ADC config with GAS INPUT CHANNEL DATA
    setConfig = setConfig | channel_data;
 8001470:	89fa      	ldrh	r2, [r7, #14]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4313      	orrs	r3, r2
 8001476:	81fb      	strh	r3, [r7, #14]

    //Write config values to config register
    airq5_writeData(_AIRQ5_REG_POINTER_CONFIG, setConfig );
 8001478:	2201      	movs	r2, #1
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	4619      	mov	r1, r3
 800147e:	4610      	mov	r0, r2
 8001480:	f7ff ff8c 	bl	800139c <airq5_writeData>

    //Get ADC Voltage Values
    getData = airq5_readData( _AIRQ5_REG_POINTER_CONVERT );
 8001484:	2300      	movs	r3, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffac 	bl	80013e4 <airq5_readData>
 800148c:	4603      	mov	r3, r0
 800148e:	81bb      	strh	r3, [r7, #12]

    //ADC returns 12 bit data, Accomodate data in 16 bit variable
    getData = getData >> 4;
 8001490:	89bb      	ldrh	r3, [r7, #12]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	81bb      	strh	r3, [r7, #12]

    //Return voltage
    return getData;
 8001496:	89bb      	ldrh	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000003a 	.word	0x2000003a

080014a4 <NO2_volts_to_ppb>:
 * @param[out] Gas Concentration in PPB
 * @note       none
 */

uint16_t NO2_volts_to_ppb(uint16_t sensorDat)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	uint16_t ppbval;
	if(sensorDat >= 1400 && sensorDat <= 2047)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80014b4:	d306      	bcc.n	80014c4 <NO2_volts_to_ppb+0x20>
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014bc:	d202      	bcs.n	80014c4 <NO2_volts_to_ppb+0x20>
	{
	    ppbval = 100;
 80014be:	2364      	movs	r3, #100	; 0x64
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	e042      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat >= 1300 && sensorDat <1400)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	f240 5213 	movw	r2, #1299	; 0x513
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d906      	bls.n	80014dc <NO2_volts_to_ppb+0x38>
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80014d4:	d202      	bcs.n	80014dc <NO2_volts_to_ppb+0x38>
	{
		ppbval = 200;
 80014d6:	23c8      	movs	r3, #200	; 0xc8
 80014d8:	81fb      	strh	r3, [r7, #14]
 80014da:	e036      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat >= 1200 && sensorDat < 1300)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80014e2:	d307      	bcc.n	80014f4 <NO2_volts_to_ppb+0x50>
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f240 5213 	movw	r2, #1299	; 0x513
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d802      	bhi.n	80014f4 <NO2_volts_to_ppb+0x50>
	{
		ppbval = 250;
 80014ee:	23fa      	movs	r3, #250	; 0xfa
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	e02a      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat >=1000 && sensorDat < 1200)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fa:	d307      	bcc.n	800150c <NO2_volts_to_ppb+0x68>
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001502:	d203      	bcs.n	800150c <NO2_volts_to_ppb+0x68>
	{
		ppbval = 350;
 8001504:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001508:	81fb      	strh	r3, [r7, #14]
 800150a:	e01e      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat >=800 && sensorDat < 1000)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001512:	d307      	bcc.n	8001524 <NO2_volts_to_ppb+0x80>
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d203      	bcs.n	8001524 <NO2_volts_to_ppb+0x80>
	{
		ppbval = 500;
 800151c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001520:	81fb      	strh	r3, [r7, #14]
 8001522:	e012      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat >=400 && sensorDat < 800)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800152a:	d307      	bcc.n	800153c <NO2_volts_to_ppb+0x98>
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001532:	d203      	bcs.n	800153c <NO2_volts_to_ppb+0x98>
	{
		ppbval = 1000;
 8001534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	e006      	b.n	800154a <NO2_volts_to_ppb+0xa6>
	}
	else if(sensorDat < 400)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001542:	d202      	bcs.n	800154a <NO2_volts_to_ppb+0xa6>
	{
		ppbval = 2000;
 8001544:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001548:	81fb      	strh	r3, [r7, #14]
	}

	return(ppbval);
 800154a:	89fb      	ldrh	r3, [r7, #14]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <NO2_ppbToAQI>:
 * @param[out] Gas AQI
 * @note       none
 */

uint16_t NO2_ppbToAQI(uint16_t ppbval)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
	uint16_t NO2_AQI;

	if(ppbval == 100)
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b64      	cmp	r3, #100	; 0x64
 8001566:	d102      	bne.n	800156e <NO2_ppbToAQI+0x16>
	{
		NO2_AQI  = 95;
 8001568:	235f      	movs	r3, #95	; 0x5f
 800156a:	81fb      	strh	r3, [r7, #14]
 800156c:	e028      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 200)
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2bc8      	cmp	r3, #200	; 0xc8
 8001572:	d102      	bne.n	800157a <NO2_ppbToAQI+0x22>
	{
		NO2_AQI = 115;
 8001574:	2373      	movs	r3, #115	; 0x73
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e022      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 250)
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2bfa      	cmp	r3, #250	; 0xfa
 800157e:	d102      	bne.n	8001586 <NO2_ppbToAQI+0x2e>
	{
		NO2_AQI = 125;
 8001580:	237d      	movs	r3, #125	; 0x7d
 8001582:	81fb      	strh	r3, [r7, #14]
 8001584:	e01c      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 350)
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800158c:	d102      	bne.n	8001594 <NO2_ppbToAQI+0x3c>
	{
		NO2_AQI = 150;
 800158e:	2396      	movs	r3, #150	; 0x96
 8001590:	81fb      	strh	r3, [r7, #14]
 8001592:	e015      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 500)
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800159a:	d102      	bne.n	80015a2 <NO2_ppbToAQI+0x4a>
	{
		NO2_AQI = 180;
 800159c:	23b4      	movs	r3, #180	; 0xb4
 800159e:	81fb      	strh	r3, [r7, #14]
 80015a0:	e00e      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 1000)
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a8:	d103      	bne.n	80015b2 <NO2_ppbToAQI+0x5a>
	{
		NO2_AQI = 290;
 80015aa:	f44f 7391 	mov.w	r3, #290	; 0x122
 80015ae:	81fb      	strh	r3, [r7, #14]
 80015b0:	e006      	b.n	80015c0 <NO2_ppbToAQI+0x68>
	}
	else if(ppbval == 2000)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015b8:	d102      	bne.n	80015c0 <NO2_ppbToAQI+0x68>
	{
		NO2_AQI = 500;
 80015ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015be:	81fb      	strh	r3, [r7, #14]
	}

	return(NO2_AQI);
 80015c0:	89fb      	ldrh	r3, [r7, #14]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <CO_volts_to_ppm>:
 * @param[out] Gas Concentration in PPM
 * @note       none
 */

uint16_t CO_volts_to_ppm(uint16_t sensorDat)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	80fb      	strh	r3, [r7, #6]
	uint16_t ppmval;

	if(sensorDat >= 0 && sensorDat <=600)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80015de:	d802      	bhi.n	80015e6 <CO_volts_to_ppm+0x18>
	{
		ppmval = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	e01d      	b.n	8001622 <CO_volts_to_ppm+0x54>
	}
	else if(sensorDat >= 700 && sensorDat < 1400)
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015ec:	d306      	bcc.n	80015fc <CO_volts_to_ppm+0x2e>
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80015f4:	d202      	bcs.n	80015fc <CO_volts_to_ppm+0x2e>
	{
		ppmval = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	81fb      	strh	r3, [r7, #14]
 80015fa:	e012      	b.n	8001622 <CO_volts_to_ppm+0x54>
	}
	else if(sensorDat >= 1400 && sensorDat <2100)
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001602:	d307      	bcc.n	8001614 <CO_volts_to_ppm+0x46>
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	f640 0233 	movw	r2, #2099	; 0x833
 800160a:	4293      	cmp	r3, r2
 800160c:	d802      	bhi.n	8001614 <CO_volts_to_ppm+0x46>
	{
		ppmval = 9;
 800160e:	2309      	movs	r3, #9
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	e006      	b.n	8001622 <CO_volts_to_ppm+0x54>
	}
	else if(sensorDat >= 2100)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f640 0233 	movw	r2, #2099	; 0x833
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <CO_volts_to_ppm+0x54>
	{
		ppmval = 30;
 800161e:	231e      	movs	r3, #30
 8001620:	81fb      	strh	r3, [r7, #14]
	}

	if(ppmval == 58755)
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	f24e 5283 	movw	r2, #58755	; 0xe583
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <CO_volts_to_ppm+0x62>
	{
		ppmval = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	81fb      	strh	r3, [r7, #14]
	}
	return(ppmval);
 8001630:	89fb      	ldrh	r3, [r7, #14]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <CO_ppmToAQI>:
 * @param[out] Gas AQI
 * @note       none
 */

uint16_t CO_ppmToAQI(uint16_t ppmval)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	80fb      	strh	r3, [r7, #6]
		uint16_t CO_AQI;

	if(ppmval == 1)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <CO_ppmToAQI+0x16>
	{
		CO_AQI  = 95;
 800164e:	235f      	movs	r3, #95	; 0x5f
 8001650:	81fb      	strh	r3, [r7, #14]
 8001652:	e011      	b.n	8001678 <CO_ppmToAQI+0x3a>
	}
	else if(ppmval == 4)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d102      	bne.n	8001660 <CO_ppmToAQI+0x22>
	{
		CO_AQI = 115;
 800165a:	2373      	movs	r3, #115	; 0x73
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	e00b      	b.n	8001678 <CO_ppmToAQI+0x3a>
	}
	else if(ppmval == 9)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2b09      	cmp	r3, #9
 8001664:	d102      	bne.n	800166c <CO_ppmToAQI+0x2e>
	{
		CO_AQI = 125;
 8001666:	237d      	movs	r3, #125	; 0x7d
 8001668:	81fb      	strh	r3, [r7, #14]
 800166a:	e005      	b.n	8001678 <CO_ppmToAQI+0x3a>
	}
	else if(ppmval == 30)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	2b1e      	cmp	r3, #30
 8001670:	d102      	bne.n	8001678 <CO_ppmToAQI+0x3a>
	{
		CO_AQI = 300;
 8001672:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001676:	81fb      	strh	r3, [r7, #14]
	}

	return(CO_AQI);
 8001678:	89fb      	ldrh	r3, [r7, #14]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <getNO2_ppb>:
 * @param[out] Gas Concentration in PPB
 * @note       none
 */

uint16_t getNO2_ppb(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  NO2_sensorData = (airq5_readSensorData(_AIRQ5_DATA_CHANNEL_NO2));
 800168c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fee5 	bl	8001460 <airq5_readSensorData>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <getNO2_ppb+0x30>)
 800169c:	801a      	strh	r2, [r3, #0]
  NO2_ppb = NO2_volts_to_ppb(NO2_sensorData);
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <getNO2_ppb+0x30>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fefe 	bl	80014a4 <NO2_volts_to_ppb>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <getNO2_ppb+0x34>)
 80016ae:	801a      	strh	r2, [r3, #0]
  return(NO2_ppb);
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <getNO2_ppb+0x34>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000842 	.word	0x20000842
 80016bc:	20000838 	.word	0x20000838

080016c0 <getNO2_AQI>:
 * @param[out] NO2 AQI
 * @note       none
 */

uint16_t getNO2_AQI(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  NO2_AQI = NO2_ppbToAQI(NO2_ppb);
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <getNO2_AQI+0x30>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff45 	bl	8001558 <NO2_ppbToAQI>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <getNO2_AQI+0x34>)
 80016d4:	801a      	strh	r2, [r3, #0]
  NH3_sensorData = airq5_readSensorData(_AIRQ5_DATA_CHANNEL_NH3);
 80016d6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fec0 	bl	8001460 <airq5_readSensorData>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <getNO2_AQI+0x38>)
 80016e6:	801a      	strh	r2, [r3, #0]
  return (NO2_AQI);
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <getNO2_AQI+0x34>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000838 	.word	0x20000838
 80016f4:	200007ec 	.word	0x200007ec
 80016f8:	20000840 	.word	0x20000840

080016fc <getCO_ppm>:
 * @param[out] Gas Concentration in PPM
 * @note       none
 */

uint16_t getCO_ppm(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
CO_sensorData = (airq5_readSensorData(_AIRQ5_DATA_CHANNEL_CO));
 8001700:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff feab 	bl	8001460 <airq5_readSensorData>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <getCO_ppm+0x30>)
 8001710:	801a      	strh	r2, [r3, #0]
CO_ppm = CO_volts_to_ppm(CO_sensorData);
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <getCO_ppm+0x30>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff59 	bl	80015ce <CO_volts_to_ppm>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <getCO_ppm+0x34>)
 8001722:	801a      	strh	r2, [r3, #0]
return(CO_ppm);
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <getCO_ppm+0x34>)
 8001726:	881b      	ldrh	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000846 	.word	0x20000846
 8001730:	2000083c 	.word	0x2000083c

08001734 <getCO_aqi>:
 * @param[out] CO AQI
 * @note       none
 */

uint16_t getCO_aqi(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	CO_AQI = CO_ppmToAQI(CO_ppm);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <getCO_aqi+0x20>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff7e 	bl	800163e <CO_ppmToAQI>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <getCO_aqi+0x24>)
 8001748:	801a      	strh	r2, [r3, #0]
	return(CO_AQI);
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <getCO_aqi+0x24>)
 800174c:	881b      	ldrh	r3, [r3, #0]
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000083c 	.word	0x2000083c
 8001758:	200007e8 	.word	0x200007e8

0800175c <sht_getTemp>:
 * @param[out] Temperature string
 * @note       none
 */

char* sht_getTemp(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af02      	add	r7, sp, #8
	//Transmit Command To read Temp and Humidity One Shot
    HAL_I2C_Master_Transmit(&hi2c2, sht_waddr, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <sht_getTemp+0x94>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b299      	uxth	r1, r3
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <sht_getTemp+0x98>)
 8001772:	4821      	ldr	r0, [pc, #132]	; (80017f8 <sht_getTemp+0x9c>)
 8001774:	f001 f9be 	bl	8002af4 <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 8001778:	200a      	movs	r0, #10
 800177a:	f000 fdd1 	bl	8002320 <HAL_Delay>

    //Receive 4 Bytes Temp and Humidity Data with 2 bytes of CRC
    HAL_I2C_Master_Receive(&hi2c2, sht_raddr, (uint8_t*)&buffer, 6, HAL_MAX_DELAY);
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <sht_getTemp+0xa0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b299      	uxth	r1, r3
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2306      	movs	r3, #6
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <sht_getTemp+0xa4>)
 800178e:	481a      	ldr	r0, [pc, #104]	; (80017f8 <sht_getTemp+0x9c>)
 8001790:	f001 faae 	bl	8002cf0 <HAL_I2C_Master_Receive>

    //Conversion formula for integer calculation from datasheet
    t_ticks = ( (buffer[0] * 256) + buffer[1] );
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <sht_getTemp+0xa4>)
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	b29b      	uxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sht_getTemp+0xa4>)
 80017a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <sht_getTemp+0xa8>)
 80017ae:	801a      	strh	r2, [r3, #0]

    t_degC = (-45 + (175 * t_ticks/65535) ) ;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <sht_getTemp+0xa8>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	23af      	movs	r3, #175	; 0xaf
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <sht_getTemp+0xac>)
 80017be:	fb82 1203 	smull	r1, r2, r2, r3
 80017c2:	441a      	add	r2, r3
 80017c4:	13d2      	asrs	r2, r2, #15
 80017c6:	17db      	asrs	r3, r3, #31
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b2d      	subs	r3, #45	; 0x2d
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <sht_getTemp+0xb0>)
 80017d4:	801a      	strh	r2, [r3, #0]

    //Convert temperature to string
  	itoa(t_degC, Temp, 10);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <sht_getTemp+0xb0>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	220a      	movs	r2, #10
 80017de:	490c      	ldr	r1, [pc, #48]	; (8001810 <sht_getTemp+0xb4>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fabd 	bl	8004d60 <itoa>

  	return(Temp);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <sht_getTemp+0xb4>)
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000003d 	.word	0x2000003d
 80017f4:	2000003e 	.word	0x2000003e
 80017f8:	20000718 	.word	0x20000718
 80017fc:	2000003c 	.word	0x2000003c
 8001800:	20000168 	.word	0x20000168
 8001804:	20000848 	.word	0x20000848
 8001808:	80008001 	.word	0x80008001
 800180c:	2000084c 	.word	0x2000084c
 8001810:	20000170 	.word	0x20000170

08001814 <sht_getHumidity>:
 * @param[out] Temperature string
 * @note       none
 */

char* sht_getHumidity(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af02      	add	r7, sp, #8
	//Transmit Command To read Temp and Humidity One Shot
    HAL_I2C_Master_Transmit(&hi2c2, sht_waddr, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <sht_getHumidity+0xb8>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b299      	uxth	r1, r3
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <sht_getHumidity+0xbc>)
 800182a:	482a      	ldr	r0, [pc, #168]	; (80018d4 <sht_getHumidity+0xc0>)
 800182c:	f001 f962 	bl	8002af4 <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 8001830:	200a      	movs	r0, #10
 8001832:	f000 fd75 	bl	8002320 <HAL_Delay>

    //Receive 4 Bytes Temp and Humidity Data with 2 bytes of CRC
    HAL_I2C_Master_Receive(&hi2c2, sht_raddr, (uint8_t*)&buffer, 6, HAL_MAX_DELAY);
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <sht_getHumidity+0xc4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b299      	uxth	r1, r3
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2306      	movs	r3, #6
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <sht_getHumidity+0xc8>)
 8001846:	4823      	ldr	r0, [pc, #140]	; (80018d4 <sht_getHumidity+0xc0>)
 8001848:	f001 fa52 	bl	8002cf0 <HAL_I2C_Master_Receive>

    //Humidity formula for integer calculation from datasheet
    rh_ticks = ( (buffer[3] * 256) + buffer[4] );
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <sht_getHumidity+0xc8>)
 800184e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001852:	b29b      	uxth	r3, r3
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <sht_getHumidity+0xc8>)
 800185a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <sht_getHumidity+0xcc>)
 8001866:	801a      	strh	r2, [r3, #0]

    rh_pRH = (-6 + (125 * rh_ticks/65535) ) ;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <sht_getHumidity+0xcc>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <sht_getHumidity+0xd0>)
 800187a:	fb82 1203 	smull	r1, r2, r2, r3
 800187e:	441a      	add	r2, r3
 8001880:	13d2      	asrs	r2, r2, #15
 8001882:	17db      	asrs	r3, r3, #31
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b06      	subs	r3, #6
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <sht_getHumidity+0xd4>)
 8001890:	801a      	strh	r2, [r3, #0]

    // For RH signal out of range,  cropping of signal   ---> Section 4.6 of datasheet
    if (rh_pRH > 100)
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <sht_getHumidity+0xd4>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	dd03      	ble.n	80018a4 <sht_getHumidity+0x90>
    rh_pRH = 100;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <sht_getHumidity+0xd4>)
 800189e:	2264      	movs	r2, #100	; 0x64
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	e007      	b.n	80018b4 <sht_getHumidity+0xa0>
    else if (rh_pRH < 0)
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <sht_getHumidity+0xd4>)
 80018a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da02      	bge.n	80018b4 <sht_getHumidity+0xa0>
    rh_pRH = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <sht_getHumidity+0xd4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]

    //Convert temperature to string
 	itoa(rh_pRH, Humid, 10);
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <sht_getHumidity+0xd4>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	220a      	movs	r2, #10
 80018bc:	490b      	ldr	r1, [pc, #44]	; (80018ec <sht_getHumidity+0xd8>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fa4e 	bl	8004d60 <itoa>

 	return(Humid);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <sht_getHumidity+0xd8>)

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000003d 	.word	0x2000003d
 80018d0:	2000003e 	.word	0x2000003e
 80018d4:	20000718 	.word	0x20000718
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	20000168 	.word	0x20000168
 80018e0:	2000084a 	.word	0x2000084a
 80018e4:	80008001 	.word	0x80008001
 80018e8:	2000084e 	.word	0x2000084e
 80018ec:	20000174 	.word	0x20000174

080018f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018f6:	f000 fa29 	bl	8001d4c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018fe:	2201      	movs	r2, #1
 8001900:	2178      	movs	r1, #120	; 0x78
 8001902:	485b      	ldr	r0, [pc, #364]	; (8001a70 <SSD1306_Init+0x180>)
 8001904:	f001 fc26 	bl	8003154 <HAL_I2C_IsDeviceReady>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800190e:	2300      	movs	r3, #0
 8001910:	e0a9      	b.n	8001a66 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001912:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001916:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001918:	e002      	b.n	8001920 <SSD1306_Init+0x30>
		p--;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3b01      	subs	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001926:	22ae      	movs	r2, #174	; 0xae
 8001928:	2100      	movs	r1, #0
 800192a:	2078      	movs	r0, #120	; 0x78
 800192c:	f000 fa8a 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	2078      	movs	r0, #120	; 0x78
 8001936:	f000 fa85 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800193a:	2210      	movs	r2, #16
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f000 fa80 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001944:	22b0      	movs	r2, #176	; 0xb0
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	; 0x78
 800194a:	f000 fa7b 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800194e:	22c8      	movs	r2, #200	; 0xc8
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	; 0x78
 8001954:	f000 fa76 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2078      	movs	r0, #120	; 0x78
 800195e:	f000 fa71 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001962:	2210      	movs	r2, #16
 8001964:	2100      	movs	r1, #0
 8001966:	2078      	movs	r0, #120	; 0x78
 8001968:	f000 fa6c 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	2100      	movs	r1, #0
 8001970:	2078      	movs	r0, #120	; 0x78
 8001972:	f000 fa67 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001976:	2281      	movs	r2, #129	; 0x81
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	; 0x78
 800197c:	f000 fa62 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001980:	22ff      	movs	r2, #255	; 0xff
 8001982:	2100      	movs	r1, #0
 8001984:	2078      	movs	r0, #120	; 0x78
 8001986:	f000 fa5d 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800198a:	22a1      	movs	r2, #161	; 0xa1
 800198c:	2100      	movs	r1, #0
 800198e:	2078      	movs	r0, #120	; 0x78
 8001990:	f000 fa58 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001994:	22a6      	movs	r2, #166	; 0xa6
 8001996:	2100      	movs	r1, #0
 8001998:	2078      	movs	r0, #120	; 0x78
 800199a:	f000 fa53 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800199e:	22a8      	movs	r2, #168	; 0xa8
 80019a0:	2100      	movs	r1, #0
 80019a2:	2078      	movs	r0, #120	; 0x78
 80019a4:	f000 fa4e 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	2100      	movs	r1, #0
 80019ac:	2078      	movs	r0, #120	; 0x78
 80019ae:	f000 fa49 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019b2:	22a4      	movs	r2, #164	; 0xa4
 80019b4:	2100      	movs	r1, #0
 80019b6:	2078      	movs	r0, #120	; 0x78
 80019b8:	f000 fa44 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019bc:	22d3      	movs	r2, #211	; 0xd3
 80019be:	2100      	movs	r1, #0
 80019c0:	2078      	movs	r0, #120	; 0x78
 80019c2:	f000 fa3f 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 fa3a 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019d0:	22d5      	movs	r2, #213	; 0xd5
 80019d2:	2100      	movs	r1, #0
 80019d4:	2078      	movs	r0, #120	; 0x78
 80019d6:	f000 fa35 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019da:	22f0      	movs	r2, #240	; 0xf0
 80019dc:	2100      	movs	r1, #0
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 fa30 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019e4:	22d9      	movs	r2, #217	; 0xd9
 80019e6:	2100      	movs	r1, #0
 80019e8:	2078      	movs	r0, #120	; 0x78
 80019ea:	f000 fa2b 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019ee:	2222      	movs	r2, #34	; 0x22
 80019f0:	2100      	movs	r1, #0
 80019f2:	2078      	movs	r0, #120	; 0x78
 80019f4:	f000 fa26 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019f8:	22da      	movs	r2, #218	; 0xda
 80019fa:	2100      	movs	r1, #0
 80019fc:	2078      	movs	r0, #120	; 0x78
 80019fe:	f000 fa21 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a02:	2212      	movs	r2, #18
 8001a04:	2100      	movs	r1, #0
 8001a06:	2078      	movs	r0, #120	; 0x78
 8001a08:	f000 fa1c 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a0c:	22db      	movs	r2, #219	; 0xdb
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2078      	movs	r0, #120	; 0x78
 8001a12:	f000 fa17 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a16:	2220      	movs	r2, #32
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2078      	movs	r0, #120	; 0x78
 8001a1c:	f000 fa12 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a20:	228d      	movs	r2, #141	; 0x8d
 8001a22:	2100      	movs	r1, #0
 8001a24:	2078      	movs	r0, #120	; 0x78
 8001a26:	f000 fa0d 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a2a:	2214      	movs	r2, #20
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 fa08 	bl	8001e44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a34:	22af      	movs	r2, #175	; 0xaf
 8001a36:	2100      	movs	r1, #0
 8001a38:	2078      	movs	r0, #120	; 0x78
 8001a3a:	f000 fa03 	bl	8001e44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a3e:	222e      	movs	r2, #46	; 0x2e
 8001a40:	2100      	movs	r1, #0
 8001a42:	2078      	movs	r0, #120	; 0x78
 8001a44:	f000 f9fe 	bl	8001e44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f843 	bl	8001ad4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a4e:	f000 f813 	bl	8001a78 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SSD1306_Init+0x184>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SSD1306_Init+0x184>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SSD1306_Init+0x184>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000794 	.word	0x20000794
 8001a74:	20000578 	.word	0x20000578

08001a78 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e01d      	b.n	8001ac0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3b50      	subs	r3, #80	; 0x50
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2078      	movs	r0, #120	; 0x78
 8001a90:	f000 f9d8 	bl	8001e44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2078      	movs	r0, #120	; 0x78
 8001a9a:	f000 f9d3 	bl	8001e44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2078      	movs	r0, #120	; 0x78
 8001aa4:	f000 f9ce 	bl	8001e44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <SSD1306_UpdateScreen+0x58>)
 8001aae:	441a      	add	r2, r3
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	2078      	movs	r0, #120	; 0x78
 8001ab6:	f000 f95f 	bl	8001d78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	3301      	adds	r3, #1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	d9de      	bls.n	8001a84 <SSD1306_UpdateScreen+0xc>
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000178 	.word	0x20000178

08001ad4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <SSD1306_Fill+0x14>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <SSD1306_Fill+0x16>
 8001ae8:	23ff      	movs	r3, #255	; 0xff
 8001aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aee:	4619      	mov	r1, r3
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <SSD1306_Fill+0x2c>)
 8001af2:	f003 f999 	bl	8004e28 <memset>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000178 	.word	0x20000178

08001b04 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	80bb      	strh	r3, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	70fb      	strb	r3, [r7, #3]
	if (
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	2b7f      	cmp	r3, #127	; 0x7f
 8001b1a:	d848      	bhi.n	8001bae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b1c:	88bb      	ldrh	r3, [r7, #4]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	d845      	bhi.n	8001bae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <SSD1306_DrawPixel+0xb8>)
 8001b24:	791b      	ldrb	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d11a      	bne.n	8001b74 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	08db      	lsrs	r3, r3, #3
 8001b44:	b298      	uxth	r0, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	01db      	lsls	r3, r3, #7
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <SSD1306_DrawPixel+0xbc>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	b25a      	sxtb	r2, r3
 8001b52:	88bb      	ldrh	r3, [r7, #4]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b259      	sxtb	r1, r3
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	4603      	mov	r3, r0
 8001b68:	01db      	lsls	r3, r3, #7
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2c9      	uxtb	r1, r1
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <SSD1306_DrawPixel+0xbc>)
 8001b70:	54d1      	strb	r1, [r2, r3]
 8001b72:	e01d      	b.n	8001bb0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	b298      	uxth	r0, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4413      	add	r3, r2
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <SSD1306_DrawPixel+0xbc>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	b25a      	sxtb	r2, r3
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b259      	sxtb	r1, r3
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	01db      	lsls	r3, r3, #7
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SSD1306_DrawPixel+0xbc>)
 8001baa:	54d1      	strb	r1, [r2, r3]
 8001bac:	e000      	b.n	8001bb0 <SSD1306_DrawPixel+0xac>
		return;
 8001bae:	bf00      	nop
	}
}
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000578 	.word	0x20000578
 8001bc0:	20000178 	.word	0x20000178

08001bc4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	80fb      	strh	r3, [r7, #6]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SSD1306_GotoXY+0x28>)
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <SSD1306_GotoXY+0x28>)
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	8053      	strh	r3, [r2, #2]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000578 	.word	0x20000578

08001bf0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
	if (
 8001c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c0e:	dc07      	bgt.n	8001c20 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c10:	4b36      	ldr	r3, [pc, #216]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	461a      	mov	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c1e:	dd01      	ble.n	8001c24 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e05e      	b.n	8001ce2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e04b      	b.n	8001cc2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	3b20      	subs	r3, #32
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	7849      	ldrb	r1, [r1, #1]
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	440b      	add	r3, r1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e030      	b.n	8001cb0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c60:	881a      	ldrh	r2, [r3, #0]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	b298      	uxth	r0, r3
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c6c:	885a      	ldrh	r2, [r3, #2]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	79ba      	ldrb	r2, [r7, #6]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7ff ff43 	bl	8001b04 <SSD1306_DrawPixel>
 8001c7e:	e014      	b.n	8001caa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <SSD1306_Putc+0xfc>)
 8001c8e:	885a      	ldrh	r2, [r3, #2]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b299      	uxth	r1, r3
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f7ff ff2d 	bl	8001b04 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	3301      	adds	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d3c8      	bcc.n	8001c4e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d3ad      	bcc.n	8001c2a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <SSD1306_Putc+0xfc>)
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <SSD1306_Putc+0xfc>)
 8001cde:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000578 	.word	0x20000578

08001cf0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001cfe:	e012      	b.n	8001d26 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff71 	bl	8001bf0 <SSD1306_Putc>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d002      	beq.n	8001d20 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	e008      	b.n	8001d32 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e8      	bne.n	8001d00 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fec8 	bl	8001ad4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d44:	f7ff fe98 	bl	8001a78 <SSD1306_UpdateScreen>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <ssd1306_I2C_Init+0x28>)
 8001d54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d56:	e002      	b.n	8001d5e <ssd1306_I2C_Init+0x12>
		p--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	0003d090 	.word	0x0003d090

08001d78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b0c7      	sub	sp, #284	; 0x11c
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d86:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d8a:	600a      	str	r2, [r1, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d92:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d96:	4622      	mov	r2, r4
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d9e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001da2:	4602      	mov	r2, r0
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001daa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dae:	460a      	mov	r2, r1
 8001db0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dbe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001dcc:	e015      	b.n	8001dfa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001dce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	441a      	add	r2, r3
 8001dde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001de2:	3301      	adds	r3, #1
 8001de4:	7811      	ldrb	r1, [r2, #0]
 8001de6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001dee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001df0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001df4:	3301      	adds	r3, #1
 8001df6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001dfa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001e08:	8812      	ldrh	r2, [r2, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d8df      	bhi.n	8001dce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e12:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f107 020c 	add.w	r2, r7, #12
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	9000      	str	r0, [sp, #0]
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e32:	f000 fe5f 	bl	8002af4 <HAL_I2C_Master_Transmit>
}
 8001e36:	bf00      	nop
 8001e38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000794 	.word	0x20000794

08001e44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	71bb      	strb	r3, [r7, #6]
 8001e52:	4613      	mov	r3, r2
 8001e54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e5a:	797b      	ldrb	r3, [r7, #5]
 8001e5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	b299      	uxth	r1, r3
 8001e62:	f107 020c 	add.w	r2, r7, #12
 8001e66:	230a      	movs	r3, #10
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <ssd1306_I2C_Write+0x38>)
 8001e6e:	f000 fe41 	bl	8002af4 <HAL_I2C_Master_Transmit>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000794 	.word	0x20000794

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f000 fb04 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <HAL_I2C_MspInit+0xe8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12c      	bne.n	8001f4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f12:	2312      	movs	r3, #18
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4825      	ldr	r0, [pc, #148]	; (8001fc0 <HAL_I2C_MspInit+0xf0>)
 8001f2a:	f000 fb03 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f4a:	e031      	b.n	8001fb0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_I2C_MspInit+0xf4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12c      	bne.n	8001fb0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f84:	2304      	movs	r3, #4
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_I2C_MspInit+0xf0>)
 8001f90:	f000 fad0 	bl	8002534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_I2C_MspInit+0xec>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40005800 	.word	0x40005800

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_UART_MspInit+0x124>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a3f      	ldr	r2, [pc, #252]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8001ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_UART_MspInit+0x128>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002022:	2303      	movs	r3, #3
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002032:	2308      	movs	r3, #8
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	482d      	ldr	r0, [pc, #180]	; (80020f4 <HAL_UART_MspInit+0x12c>)
 800203e:	f000 fa79 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002042:	e04f      	b.n	80020e4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==UART5)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_UART_MspInit+0x130>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d14a      	bne.n	80020e4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_UART_MspInit+0x128>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_UART_MspInit+0x128>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x128>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020b4:	2308      	movs	r3, #8
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <HAL_UART_MspInit+0x134>)
 80020c0:	f000 fa38 	bl	8002534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c4:	2304      	movs	r3, #4
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020d4:	2308      	movs	r3, #8
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_UART_MspInit+0x138>)
 80020e0:	f000 fa28 	bl	8002534 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40004c00 	.word	0x40004c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40005000 	.word	0x40005000
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002150:	f000 f8c6 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f002 fe56 	bl	8004e38 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20020000 	.word	0x20020000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	20000580 	.word	0x20000580
 80021c0:	20000858 	.word	0x20000858

080021c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <SystemInit+0x20>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <SystemInit+0x20>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021ec:	f7ff ffea 	bl	80021c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	; (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	; (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f002 fe15 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7fe fb1f 	bl	800085c <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800222c:	080079a4 	.word	0x080079a4
  ldr r2, =_sbss
 8002230:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002234:	20000854 	.word	0x20000854

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>
	...

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_Init+0x40>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_Init+0x40>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_Init+0x40>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f931 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f808 	bl	8002280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f7ff fe06 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x54>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x58>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f93b 	bl	800251a <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00e      	b.n	80022cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d80a      	bhi.n	80022ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f911 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_InitTick+0x5c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000040 	.word	0x20000040
 80022d8:	20000048 	.word	0x20000048
 80022dc:	20000044 	.word	0x20000044

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000048 	.word	0x20000048
 8002304:	20000850 	.word	0x20000850

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000850 	.word	0x20000850

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_Delay+0x44>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000048 	.word	0x20000048

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff47 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff5c 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffb0 	bl	8002488 <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e16b      	b.n	8002828 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 815a 	bne.w	8002822 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002582:	2b02      	cmp	r3, #2
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80b4 	beq.w	8002822 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b60      	ldr	r3, [pc, #384]	; (8002840 <HAL_GPIO_Init+0x30c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a5f      	ldr	r2, [pc, #380]	; (8002840 <HAL_GPIO_Init+0x30c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b5d      	ldr	r3, [pc, #372]	; (8002840 <HAL_GPIO_Init+0x30c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d6:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_GPIO_Init+0x310>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_GPIO_Init+0x314>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02b      	beq.n	800275a <HAL_GPIO_Init+0x226>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a51      	ldr	r2, [pc, #324]	; (800284c <HAL_GPIO_Init+0x318>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d025      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a50      	ldr	r2, [pc, #320]	; (8002850 <HAL_GPIO_Init+0x31c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01f      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4f      	ldr	r2, [pc, #316]	; (8002854 <HAL_GPIO_Init+0x320>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d019      	beq.n	800274e <HAL_GPIO_Init+0x21a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_GPIO_Init+0x324>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_GPIO_Init+0x216>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_GPIO_Init+0x328>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00d      	beq.n	8002746 <HAL_GPIO_Init+0x212>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_GPIO_Init+0x32c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <HAL_GPIO_Init+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <HAL_GPIO_Init+0x330>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_GPIO_Init+0x20a>
 800273a:	2307      	movs	r3, #7
 800273c:	e00e      	b.n	800275c <HAL_GPIO_Init+0x228>
 800273e:	2308      	movs	r3, #8
 8002740:	e00c      	b.n	800275c <HAL_GPIO_Init+0x228>
 8002742:	2306      	movs	r3, #6
 8002744:	e00a      	b.n	800275c <HAL_GPIO_Init+0x228>
 8002746:	2305      	movs	r3, #5
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x228>
 800274a:	2304      	movs	r3, #4
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x228>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x228>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x228>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x228>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x310>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_GPIO_Init+0x334>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a32      	ldr	r2, [pc, #200]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_GPIO_Init+0x334>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_GPIO_Init+0x334>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f ae90 	bls.w	8002550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40021400 	.word	0x40021400
 8002860:	40021800 	.word	0x40021800
 8002864:	40021c00 	.word	0x40021c00
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e12b      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fb1c 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d0:	f001 fd64 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_I2C_Init+0x274>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d807      	bhi.n	80028f0 <HAL_I2C_Init+0x84>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_I2C_Init+0x278>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	bf94      	ite	ls
 80028e8:	2301      	movls	r3, #1
 80028ea:	2300      	movhi	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e006      	b.n	80028fe <HAL_I2C_Init+0x92>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <HAL_I2C_Init+0x27c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0e7      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a78      	ldr	r2, [pc, #480]	; (8002aec <HAL_I2C_Init+0x280>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9b      	lsrs	r3, r3, #18
 8002910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d802      	bhi.n	8002940 <HAL_I2C_Init+0xd4>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3301      	adds	r3, #1
 800293e:	e009      	b.n	8002954 <HAL_I2C_Init+0xe8>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_I2C_Init+0x284>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	3301      	adds	r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	495c      	ldr	r1, [pc, #368]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002970:	428b      	cmp	r3, r1
 8002972:	d819      	bhi.n	80029a8 <HAL_I2C_Init+0x13c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e59      	subs	r1, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002982:	1c59      	adds	r1, r3, #1
 8002984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002988:	400b      	ands	r3, r1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_I2C_Init+0x138>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e59      	subs	r1, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fbb1 f3f3 	udiv	r3, r1, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	e051      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e04f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d111      	bne.n	80029d4 <HAL_I2C_Init+0x168>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e012      	b.n	80029fa <HAL_I2C_Init+0x18e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x196>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e022      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <HAL_I2C_Init+0x1bc>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e58      	subs	r0, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	440b      	add	r3, r1
 8002a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6809      	ldr	r1, [r1, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6911      	ldr	r1, [r2, #16]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	000186a0 	.word	0x000186a0
 8002ae4:	001e847f 	.word	0x001e847f
 8002ae8:	003d08ff 	.word	0x003d08ff
 8002aec:	431bde83 	.word	0x431bde83
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	461a      	mov	r2, r3
 8002b00:	460b      	mov	r3, r1
 8002b02:	817b      	strh	r3, [r7, #10]
 8002b04:	4613      	mov	r3, r2
 8002b06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff fbfe 	bl	8002308 <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	f040 80e0 	bne.w	8002cdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2319      	movs	r3, #25
 8002b22:	2201      	movs	r2, #1
 8002b24:	4970      	ldr	r1, [pc, #448]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fd92 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0d3      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2C_Master_Transmit+0x50>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0cc      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d007      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2221      	movs	r2, #33	; 0x21
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2210      	movs	r2, #16
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_I2C_Master_Transmit+0x1f8>)
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbfc 	bl	80033b0 <I2C_MasterRequestWrite>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e08d      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bd8:	e066      	b.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fe50 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06b      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d11b      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x188>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	6a39      	ldr	r1, [r7, #32]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fe47 	bl	8003914 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e01a      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d194      	bne.n	8002bda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	00100002 	.word	0x00100002
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fb00 	bl	8002308 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 8217 	bne.w	8003146 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2319      	movs	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	497c      	ldr	r1, [pc, #496]	; (8002f14 <HAL_I2C_Master_Receive+0x224>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fc94 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e20a      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2C_Master_Receive+0x50>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e203      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d007      	beq.n	8002d66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2222      	movs	r2, #34	; 0x22
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2210      	movs	r2, #16
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_I2C_Master_Receive+0x228>)
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fb80 	bl	80034b4 <I2C_MasterRequestRead>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c4      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e198      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d11b      	bne.n	8002e2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e178      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d11b      	bne.n	8002e6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	e158      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e94:	e144      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	f200 80f1 	bhi.w	8003082 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d123      	bne.n	8002ef0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fd79 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e145      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eee:	e117      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d14e      	bne.n	8002f96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	2200      	movs	r2, #0
 8002f00:	4906      	ldr	r1, [pc, #24]	; (8002f1c <HAL_I2C_Master_Receive+0x22c>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fba4 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e11a      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
 8002f12:	bf00      	nop
 8002f14:	00100002 	.word	0x00100002
 8002f18:	ffff0000 	.word	0xffff0000
 8002f1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f94:	e0c4      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	496c      	ldr	r1, [pc, #432]	; (8003150 <HAL_I2C_Master_Receive+0x460>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fb55 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cb      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4955      	ldr	r1, [pc, #340]	; (8003150 <HAL_I2C_Master_Receive+0x460>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fb27 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e09d      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003080:	e04e      	b.n	8003120 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fc8c 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e058      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d124      	bne.n	8003120 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f aeb6 	bne.w	8002e96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	00010004 	.word	0x00010004

08003154 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff f8d0 	bl	8002308 <HAL_GetTick>
 8003168:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	f040 8111 	bne.w	800339e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	4988      	ldr	r1, [pc, #544]	; (80033a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fa62 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e104      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_I2C_IsDeviceReady+0x50>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0fd      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d007      	beq.n	80031ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2224      	movs	r2, #36	; 0x24
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a70      	ldr	r2, [pc, #448]	; (80033ac <HAL_I2C_IsDeviceReady+0x258>)
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fa20 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003224:	d103      	bne.n	800322e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0b6      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003240:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003242:	f7ff f861 	bl	8002308 <HAL_GetTick>
 8003246:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003276:	e025      	b.n	80032c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003278:	f7ff f846 	bl	8002308 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d302      	bcc.n	800328e <HAL_I2C_IsDeviceReady+0x13a>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	22a0      	movs	r2, #160	; 0xa0
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2ba0      	cmp	r3, #160	; 0xa0
 80032ce:	d005      	beq.n	80032dc <HAL_I2C_IsDeviceReady+0x188>
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_I2C_IsDeviceReady+0x188>
 80032d6:	7dbb      	ldrb	r3, [r7, #22]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0cd      	beq.n	8003278 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d129      	bne.n	8003346 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2319      	movs	r3, #25
 800331e:	2201      	movs	r2, #1
 8003320:	4921      	ldr	r1, [pc, #132]	; (80033a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f994 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e036      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e02c      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800335e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2319      	movs	r3, #25
 8003366:	2201      	movs	r2, #1
 8003368:	490f      	ldr	r1, [pc, #60]	; (80033a8 <HAL_I2C_IsDeviceReady+0x254>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f970 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e012      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3301      	adds	r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	f4ff af32 	bcc.w	80031ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	00100002 	.word	0x00100002
 80033ac:	ffff0000 	.word	0xffff0000

080033b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d006      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d003      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d8:	d108      	bne.n	80033ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e00b      	b.n	8003404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d107      	bne.n	8003404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f91d 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342a:	d103      	bne.n	8003434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e035      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003440:	d108      	bne.n	8003454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e01b      	b.n	800348c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	11db      	asrs	r3, r3, #7
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f063 030f 	orn	r3, r3, #15
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	490e      	ldr	r1, [pc, #56]	; (80034ac <I2C_MasterRequestWrite+0xfc>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f966 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e010      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <I2C_MasterRequestWrite+0x100>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f956 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	00010008 	.word	0x00010008
 80034b0:	00010002 	.word	0x00010002

080034b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d006      	beq.n	80034ee <I2C_MasterRequestRead+0x3a>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <I2C_MasterRequestRead+0x3a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ec:	d108      	bne.n	8003500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e00b      	b.n	8003518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	2b11      	cmp	r3, #17
 8003506:	d107      	bne.n	8003518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f893 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d103      	bne.n	8003548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e079      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003554:	d108      	bne.n	8003568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e05f      	b.n	8003628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	11db      	asrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0306 	and.w	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f063 030f 	orn	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4930      	ldr	r1, [pc, #192]	; (8003648 <I2C_MasterRequestRead+0x194>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f8dc 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e054      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4929      	ldr	r1, [pc, #164]	; (800364c <I2C_MasterRequestRead+0x198>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8cc 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e044      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f831 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d103      	bne.n	800360c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e017      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003610:	897b      	ldrh	r3, [r7, #10]
 8003612:	11db      	asrs	r3, r3, #7
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0306 	and.w	r3, r3, #6
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f063 030e 	orn	r3, r3, #14
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4907      	ldr	r1, [pc, #28]	; (800364c <I2C_MasterRequestRead+0x198>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f888 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010008 	.word	0x00010008
 800364c:	00010002 	.word	0x00010002

08003650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003660:	e048      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d044      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fe4d 	bl	8002308 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d139      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	e00c      	b.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e023      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d093      	beq.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003752:	e071      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d123      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e067      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d041      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe fda8 	bl	8002308 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d136      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e00b      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e021      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10c      	bne.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e00b      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f af6d 	bne.w	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8e3 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fe fd2d 	bl	8002308 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	e034      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f89b 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e034      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe fce5 	bl	8002308 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d016      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d1c3      	bne.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b0:	e049      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d119      	bne.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e030      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fe fc88 	bl	8002308 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d016      	beq.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e007      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d1ae      	bne.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d11b      	bne.n	8003aae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e267      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d075      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d112      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x108>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d157      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e242      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x74>
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01d      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fbc8 	bl	8002308 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fbc4 	bl	8002308 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e207      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0xc0>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fbb4 	bl	8002308 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fbb0 	bl	8002308 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1f3      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xe8>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1c7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fb69 	bl	8002308 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fb65 	bl	8002308 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a8      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4925      	ldr	r1, [pc, #148]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fb48 	bl	8002308 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fb44 	bl	8002308 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e187      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d036      	beq.n	8003d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fb28 	bl	8002308 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fb24 	bl	8002308 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e167      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x200>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fb11 	bl	8002308 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fe fb0d 	bl	8002308 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d907      	bls.n	8003d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e150      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe facd 	bl	8002308 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe fac9 	bl	8002308 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e10c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2ea>
 8003d98:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x30c>
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a54      	ldr	r2, [pc, #336]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fe fa8e 	bl	8002308 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe fa8a 	bl	8002308 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0cb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fe fa78 	bl	8002308 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fa74 	bl	8002308 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0b5      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a1 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d05c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe fa48 	bl	8002308 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe fa44 	bl	8002308 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e087      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	491b      	ldr	r1, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fa1d 	bl	8002308 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe fa19 	bl	8002308 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e05c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x416>
 8003ef0:	e054      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fa06 	bl	8002308 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe fa02 	bl	8002308 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e045      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x444>
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e038      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d121      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11a      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fe f934 	bl	8002308 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fe f930 	bl	8002308 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f894 	bl	8002280 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	08007924 	.word	0x08007924
 8004170:	20000040 	.word	0x20000040
 8004174:	20000044 	.word	0x20000044

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b094      	sub	sp, #80	; 0x50
 800417e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	647b      	str	r3, [r7, #68]	; 0x44
 8004184:	2300      	movs	r3, #0
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004190:	4b79      	ldr	r3, [pc, #484]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d00d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 800419c:	2b08      	cmp	r3, #8
 800419e:	f200 80e1 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x34>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041aa:	e0db      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041b0:	e0db      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_RCC_GetSysClockFreq+0x208>)
 80041b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b6:	e0d8      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d063      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	2200      	movs	r2, #0
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
 80041e2:	2300      	movs	r3, #0
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ea:	4622      	mov	r2, r4
 80041ec:	462b      	mov	r3, r5
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4621      	mov	r1, r4
 8004204:	1a51      	subs	r1, r2, r1
 8004206:	6139      	str	r1, [r7, #16]
 8004208:	4629      	mov	r1, r5
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	018b      	lsls	r3, r1, #6
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004226:	4651      	mov	r1, sl
 8004228:	018a      	lsls	r2, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	ebb2 0801 	subs.w	r8, r2, r1
 8004230:	4659      	mov	r1, fp
 8004232:	eb63 0901 	sbc.w	r9, r3, r1
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424a:	4690      	mov	r8, r2
 800424c:	4699      	mov	r9, r3
 800424e:	4623      	mov	r3, r4
 8004250:	eb18 0303 	adds.w	r3, r8, r3
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	462b      	mov	r3, r5
 8004258:	eb49 0303 	adc.w	r3, r9, r3
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800426a:	4629      	mov	r1, r5
 800426c:	024b      	lsls	r3, r1, #9
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004274:	4621      	mov	r1, r4
 8004276:	024a      	lsls	r2, r1, #9
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004288:	f7fb fffa 	bl	8000280 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	e058      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	2200      	movs	r2, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	4611      	mov	r1, r2
 80042a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	0159      	lsls	r1, r3, #5
 80042be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c2:	0150      	lsls	r0, r2, #5
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4641      	mov	r1, r8
 80042ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e8:	ebb2 040a 	subs.w	r4, r2, sl
 80042ec:	eb63 050b 	sbc.w	r5, r3, fp
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	464b      	mov	r3, r9
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800431e:	4629      	mov	r1, r5
 8004320:	028b      	lsls	r3, r1, #10
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004328:	4621      	mov	r1, r4
 800432a:	028a      	lsls	r2, r1, #10
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	2200      	movs	r2, #0
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	61fa      	str	r2, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	f7fb ffa0 	bl	8000280 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800436c:	4618      	mov	r0, r3
 800436e:	3750      	adds	r7, #80	; 0x50
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000040 	.word	0x20000040

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08007934 	.word	0x08007934

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08007934 	.word	0x08007934

080043ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fdd8 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fa09 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d175      	bne.n	8004598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Transmit+0x2c>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e06e      	b.n	800459a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2221      	movs	r2, #33	; 0x21
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fd ff1d 	bl	8002308 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d108      	bne.n	80044f8 <HAL_UART_Transmit+0x6c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e003      	b.n	8004500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004500:	e02e      	b.n	8004560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f8df 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e03a      	b.n	800459a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	3302      	adds	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e007      	b.n	8004552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3301      	adds	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1cb      	bne.n	8004502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2140      	movs	r1, #64	; 0x40
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f8ab 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e006      	b.n	800459a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b08a      	sub	sp, #40	; 0x28
 80045a6:	af02      	add	r7, sp, #8
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 8081 	bne.w	80046c6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_UART_Receive+0x2e>
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e079      	b.n	80046c8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2222      	movs	r2, #34	; 0x22
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e8:	f7fd fe8e 	bl	8002308 <HAL_GetTick>
 80045ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d108      	bne.n	8004616 <HAL_UART_Receive+0x74>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e003      	b.n	800461e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800461e:	e047      	b.n	80046b0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	2120      	movs	r1, #32
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f850 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e042      	b.n	80046c8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10c      	bne.n	8004662 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	b29a      	uxth	r2, r3
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3302      	adds	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e01f      	b.n	80046a2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	d007      	beq.n	800467c <HAL_UART_Receive+0xda>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_UART_Receive+0xe8>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b2da      	uxtb	r2, r3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e008      	b.n	800469c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004696:	b2da      	uxtb	r2, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1b2      	bne.n	8004620 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e0:	e03b      	b.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d037      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fd fe0d 	bl	8002308 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <UART_WaitOnFlagUntilTimeout+0x30>
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e03a      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d020      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d01d      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d116      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f81d 	bl	8004782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2208      	movs	r2, #8
 800474c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d0b4      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004782:	b480      	push	{r7}
 8004784:	b095      	sub	sp, #84	; 0x54
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047aa:	643a      	str	r2, [r7, #64]	; 0x40
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d119      	bne.n	800482e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	60bb      	str	r3, [r7, #8]
   return(result);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f023 0310 	bic.w	r3, r3, #16
 8004810:	647b      	str	r3, [r7, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	330c      	adds	r3, #12
 8004818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481a:	61ba      	str	r2, [r7, #24]
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	613b      	str	r3, [r7, #16]
   return(result);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e5      	bne.n	80047fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800483c:	bf00      	nop
 800483e:	3754      	adds	r7, #84	; 0x54
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484c:	b0c0      	sub	sp, #256	; 0x100
 800484e:	af00      	add	r7, sp, #0
 8004850:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	ea40 0301 	orr.w	r3, r0, r1
 8004870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	431a      	orrs	r2, r3
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048a0:	f021 010c 	bic.w	r1, r1, #12
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ae:	430b      	orrs	r3, r1
 80048b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	6999      	ldr	r1, [r3, #24]
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	ea40 0301 	orr.w	r3, r0, r1
 80048ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b8f      	ldr	r3, [pc, #572]	; (8004b14 <UART_SetConfig+0x2cc>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d005      	beq.n	80048e8 <UART_SetConfig+0xa0>
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <UART_SetConfig+0x2d0>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d104      	bne.n	80048f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e8:	f7ff fd6c 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80048ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048f0:	e003      	b.n	80048fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048f2:	f7ff fd53 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80048f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	f040 810c 	bne.w	8004b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490c:	2200      	movs	r2, #0
 800490e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004912:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	1891      	adds	r1, r2, r2
 8004920:	65b9      	str	r1, [r7, #88]	; 0x58
 8004922:	415b      	adcs	r3, r3
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800492a:	4621      	mov	r1, r4
 800492c:	eb12 0801 	adds.w	r8, r2, r1
 8004930:	4629      	mov	r1, r5
 8004932:	eb43 0901 	adc.w	r9, r3, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494a:	4690      	mov	r8, r2
 800494c:	4699      	mov	r9, r3
 800494e:	4623      	mov	r3, r4
 8004950:	eb18 0303 	adds.w	r3, r8, r3
 8004954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004958:	462b      	mov	r3, r5
 800495a:	eb49 0303 	adc.w	r3, r9, r3
 800495e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800496e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004976:	460b      	mov	r3, r1
 8004978:	18db      	adds	r3, r3, r3
 800497a:	653b      	str	r3, [r7, #80]	; 0x50
 800497c:	4613      	mov	r3, r2
 800497e:	eb42 0303 	adc.w	r3, r2, r3
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
 8004984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800498c:	f7fb fc78 	bl	8000280 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004996:	fba3 2302 	umull	r2, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	011c      	lsls	r4, r3, #4
 800499e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049b8:	415b      	adcs	r3, r3
 80049ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049c0:	4641      	mov	r1, r8
 80049c2:	eb12 0a01 	adds.w	sl, r2, r1
 80049c6:	4649      	mov	r1, r9
 80049c8:	eb43 0b01 	adc.w	fp, r3, r1
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e0:	4692      	mov	sl, r2
 80049e2:	469b      	mov	fp, r3
 80049e4:	4643      	mov	r3, r8
 80049e6:	eb1a 0303 	adds.w	r3, sl, r3
 80049ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ee:	464b      	mov	r3, r9
 80049f0:	eb4b 0303 	adc.w	r3, fp, r3
 80049f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	18db      	adds	r3, r3, r3
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	4613      	mov	r3, r2
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a22:	f7fb fc2d 	bl	8000280 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2264      	movs	r2, #100	; 0x64
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	1acb      	subs	r3, r1, r3
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004a44:	fba3 2302 	umull	r2, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a50:	441c      	add	r4, r3
 8004a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a64:	4642      	mov	r2, r8
 8004a66:	464b      	mov	r3, r9
 8004a68:	1891      	adds	r1, r2, r2
 8004a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a6c:	415b      	adcs	r3, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a74:	4641      	mov	r1, r8
 8004a76:	1851      	adds	r1, r2, r1
 8004a78:	6339      	str	r1, [r7, #48]	; 0x30
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	414b      	adcs	r3, r1
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	00cb      	lsls	r3, r1, #3
 8004a90:	4651      	mov	r1, sl
 8004a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a96:	4651      	mov	r1, sl
 8004a98:	00ca      	lsls	r2, r1, #3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	460a      	mov	r2, r1
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ac8:	460b      	mov	r3, r1
 8004aca:	18db      	adds	r3, r3, r3
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	4613      	mov	r3, r2
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ade:	f7fb fbcf 	bl	8000280 <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2164      	movs	r1, #100	; 0x64
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0207 	and.w	r2, r3, #7
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4422      	add	r2, r4
 8004b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b10:	e106      	b.n	8004d20 <UART_SetConfig+0x4d8>
 8004b12:	bf00      	nop
 8004b14:	40011000 	.word	0x40011000
 8004b18:	40011400 	.word	0x40011400
 8004b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b32:	4642      	mov	r2, r8
 8004b34:	464b      	mov	r3, r9
 8004b36:	1891      	adds	r1, r2, r2
 8004b38:	6239      	str	r1, [r7, #32]
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b42:	4641      	mov	r1, r8
 8004b44:	1854      	adds	r4, r2, r1
 8004b46:	4649      	mov	r1, r9
 8004b48:	eb43 0501 	adc.w	r5, r3, r1
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	00eb      	lsls	r3, r5, #3
 8004b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b5a:	00e2      	lsls	r2, r4, #3
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	18e3      	adds	r3, r4, r3
 8004b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b68:	464b      	mov	r3, r9
 8004b6a:	eb45 0303 	adc.w	r3, r5, r3
 8004b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b8e:	4629      	mov	r1, r5
 8004b90:	008b      	lsls	r3, r1, #2
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b98:	4621      	mov	r1, r4
 8004b9a:	008a      	lsls	r2, r1, #2
 8004b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ba0:	f7fb fb6e 	bl	8000280 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4b60      	ldr	r3, [pc, #384]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004baa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	011c      	lsls	r4, r3, #4
 8004bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	61b9      	str	r1, [r7, #24]
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	1851      	adds	r1, r2, r1
 8004bd8:	6139      	str	r1, [r7, #16]
 8004bda:	4649      	mov	r1, r9
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bec:	4659      	mov	r1, fp
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4642      	mov	r2, r8
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c08:	464b      	mov	r3, r9
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	008b      	lsls	r3, r1, #2
 8004c30:	4641      	mov	r1, r8
 8004c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c36:	4641      	mov	r1, r8
 8004c38:	008a      	lsls	r2, r1, #2
 8004c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c3e:	f7fb fb1f 	bl	8000280 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2264      	movs	r2, #100	; 0x64
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	3332      	adds	r3, #50	; 0x32
 8004c5c:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	441c      	add	r4, r3
 8004c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c6e:	2200      	movs	r2, #0
 8004c70:	673b      	str	r3, [r7, #112]	; 0x70
 8004c72:	677a      	str	r2, [r7, #116]	; 0x74
 8004c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	1891      	adds	r1, r2, r2
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	415b      	adcs	r3, r3
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c88:	4641      	mov	r1, r8
 8004c8a:	1851      	adds	r1, r2, r1
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	4649      	mov	r1, r9
 8004c90:	414b      	adcs	r3, r1
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	00cb      	lsls	r3, r1, #3
 8004ca4:	4651      	mov	r1, sl
 8004ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004caa:	4651      	mov	r1, sl
 8004cac:	00ca      	lsls	r2, r1, #3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cba:	464b      	mov	r3, r9
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	eb42 0303 	adc.w	r3, r2, r3
 8004cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cce:	667a      	str	r2, [r7, #100]	; 0x64
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cdc:	4649      	mov	r1, r9
 8004cde:	008b      	lsls	r3, r1, #2
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	008a      	lsls	r2, r1, #2
 8004cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cee:	f7fb fac7 	bl	8000280 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4422      	add	r2, r4
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d26:	46bd      	mov	sp, r7
 8004d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2c:	51eb851f 	.word	0x51eb851f

08004d30 <__itoa>:
 8004d30:	1e93      	subs	r3, r2, #2
 8004d32:	2b22      	cmp	r3, #34	; 0x22
 8004d34:	b510      	push	{r4, lr}
 8004d36:	460c      	mov	r4, r1
 8004d38:	d904      	bls.n	8004d44 <__itoa+0x14>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	700b      	strb	r3, [r1, #0]
 8004d3e:	461c      	mov	r4, r3
 8004d40:	4620      	mov	r0, r4
 8004d42:	bd10      	pop	{r4, pc}
 8004d44:	2a0a      	cmp	r2, #10
 8004d46:	d109      	bne.n	8004d5c <__itoa+0x2c>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	da07      	bge.n	8004d5c <__itoa+0x2c>
 8004d4c:	232d      	movs	r3, #45	; 0x2d
 8004d4e:	700b      	strb	r3, [r1, #0]
 8004d50:	4240      	negs	r0, r0
 8004d52:	2101      	movs	r1, #1
 8004d54:	4421      	add	r1, r4
 8004d56:	f000 f805 	bl	8004d64 <__utoa>
 8004d5a:	e7f1      	b.n	8004d40 <__itoa+0x10>
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	e7f9      	b.n	8004d54 <__itoa+0x24>

08004d60 <itoa>:
 8004d60:	f7ff bfe6 	b.w	8004d30 <__itoa>

08004d64 <__utoa>:
 8004d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d66:	4c1f      	ldr	r4, [pc, #124]	; (8004de4 <__utoa+0x80>)
 8004d68:	b08b      	sub	sp, #44	; 0x2c
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	466e      	mov	r6, sp
 8004d70:	f104 0c20 	add.w	ip, r4, #32
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	6861      	ldr	r1, [r4, #4]
 8004d78:	4637      	mov	r7, r6
 8004d7a:	c703      	stmia	r7!, {r0, r1}
 8004d7c:	3408      	adds	r4, #8
 8004d7e:	4564      	cmp	r4, ip
 8004d80:	463e      	mov	r6, r7
 8004d82:	d1f7      	bne.n	8004d74 <__utoa+0x10>
 8004d84:	7921      	ldrb	r1, [r4, #4]
 8004d86:	7139      	strb	r1, [r7, #4]
 8004d88:	1e91      	subs	r1, r2, #2
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	6038      	str	r0, [r7, #0]
 8004d8e:	2922      	cmp	r1, #34	; 0x22
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	d904      	bls.n	8004da0 <__utoa+0x3c>
 8004d96:	7019      	strb	r1, [r3, #0]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	b00b      	add	sp, #44	; 0x2c
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	1e58      	subs	r0, r3, #1
 8004da2:	4684      	mov	ip, r0
 8004da4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004da8:	fb02 5617 	mls	r6, r2, r7, r5
 8004dac:	3628      	adds	r6, #40	; 0x28
 8004dae:	446e      	add	r6, sp
 8004db0:	460c      	mov	r4, r1
 8004db2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004db6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004dba:	462e      	mov	r6, r5
 8004dbc:	42b2      	cmp	r2, r6
 8004dbe:	f101 0101 	add.w	r1, r1, #1
 8004dc2:	463d      	mov	r5, r7
 8004dc4:	d9ee      	bls.n	8004da4 <__utoa+0x40>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	545a      	strb	r2, [r3, r1]
 8004dca:	1919      	adds	r1, r3, r4
 8004dcc:	1aa5      	subs	r5, r4, r2
 8004dce:	42aa      	cmp	r2, r5
 8004dd0:	dae3      	bge.n	8004d9a <__utoa+0x36>
 8004dd2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004dd6:	780e      	ldrb	r6, [r1, #0]
 8004dd8:	7006      	strb	r6, [r0, #0]
 8004dda:	3201      	adds	r2, #1
 8004ddc:	f801 5901 	strb.w	r5, [r1], #-1
 8004de0:	e7f4      	b.n	8004dcc <__utoa+0x68>
 8004de2:	bf00      	nop
 8004de4:	0800793c 	.word	0x0800793c

08004de8 <siprintf>:
 8004de8:	b40e      	push	{r1, r2, r3}
 8004dea:	b500      	push	{lr}
 8004dec:	b09c      	sub	sp, #112	; 0x70
 8004dee:	ab1d      	add	r3, sp, #116	; 0x74
 8004df0:	9002      	str	r0, [sp, #8]
 8004df2:	9006      	str	r0, [sp, #24]
 8004df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004df8:	4809      	ldr	r0, [pc, #36]	; (8004e20 <siprintf+0x38>)
 8004dfa:	9107      	str	r1, [sp, #28]
 8004dfc:	9104      	str	r1, [sp, #16]
 8004dfe:	4909      	ldr	r1, [pc, #36]	; (8004e24 <siprintf+0x3c>)
 8004e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e04:	9105      	str	r1, [sp, #20]
 8004e06:	6800      	ldr	r0, [r0, #0]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	a902      	add	r1, sp, #8
 8004e0c:	f000 f99a 	bl	8005144 <_svfiprintf_r>
 8004e10:	9b02      	ldr	r3, [sp, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	b01c      	add	sp, #112	; 0x70
 8004e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e1c:	b003      	add	sp, #12
 8004e1e:	4770      	bx	lr
 8004e20:	20000098 	.word	0x20000098
 8004e24:	ffff0208 	.word	0xffff0208

08004e28 <memset>:
 8004e28:	4402      	add	r2, r0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	; (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000098 	.word	0x20000098

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	; (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	; (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	; (8004e88 <__libc_init_array+0x44>)
 8004e58:	f000 fc72 	bl	8005740 <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	0800799c 	.word	0x0800799c
 8004e80:	0800799c 	.word	0x0800799c
 8004e84:	0800799c 	.word	0x0800799c
 8004e88:	080079a0 	.word	0x080079a0

08004e8c <__retarget_lock_acquire_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_release_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <strcpy>:
 8004e90:	4603      	mov	r3, r0
 8004e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e96:	f803 2b01 	strb.w	r2, [r3], #1
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d1f9      	bne.n	8004e92 <strcpy+0x2>
 8004e9e:	4770      	bx	lr

08004ea0 <_free_r>:
 8004ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d044      	beq.n	8004f30 <_free_r+0x90>
 8004ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eaa:	9001      	str	r0, [sp, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f1a1 0404 	sub.w	r4, r1, #4
 8004eb2:	bfb8      	it	lt
 8004eb4:	18e4      	addlt	r4, r4, r3
 8004eb6:	f000 f8df 	bl	8005078 <__malloc_lock>
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <_free_r+0x94>)
 8004ebc:	9801      	ldr	r0, [sp, #4]
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x30>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	b003      	add	sp, #12
 8004ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ecc:	f000 b8da 	b.w	8005084 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x46>
 8004ed4:	6825      	ldr	r5, [r4, #0]
 8004ed6:	1961      	adds	r1, r4, r5
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1949      	addeq	r1, r1, r5
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x22>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x50>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x46>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1855      	adds	r5, r2, r1
 8004ef4:	42a5      	cmp	r5, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x70>
 8004ef8:	6824      	ldr	r4, [r4, #0]
 8004efa:	4421      	add	r1, r4
 8004efc:	1854      	adds	r4, r2, r1
 8004efe:	42a3      	cmp	r3, r4
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x26>
 8004f04:	681c      	ldr	r4, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	440c      	add	r4, r1
 8004f0c:	6014      	str	r4, [r2, #0]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x26>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x78>
 8004f12:	230c      	movs	r3, #12
 8004f14:	6003      	str	r3, [r0, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x26>
 8004f18:	6825      	ldr	r5, [r4, #0]
 8004f1a:	1961      	adds	r1, r4, r5
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf04      	itt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	bf04      	itt	eq
 8004f28:	1949      	addeq	r1, r1, r5
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7ca      	b.n	8004ec6 <_free_r+0x26>
 8004f30:	b003      	add	sp, #12
 8004f32:	bd30      	pop	{r4, r5, pc}
 8004f34:	200006c4 	.word	0x200006c4

08004f38 <sbrk_aligned>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4e0e      	ldr	r6, [pc, #56]	; (8004f74 <sbrk_aligned+0x3c>)
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	6831      	ldr	r1, [r6, #0]
 8004f40:	4605      	mov	r5, r0
 8004f42:	b911      	cbnz	r1, 8004f4a <sbrk_aligned+0x12>
 8004f44:	f000 fba6 	bl	8005694 <_sbrk_r>
 8004f48:	6030      	str	r0, [r6, #0]
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 fba1 	bl	8005694 <_sbrk_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d00a      	beq.n	8004f6c <sbrk_aligned+0x34>
 8004f56:	1cc4      	adds	r4, r0, #3
 8004f58:	f024 0403 	bic.w	r4, r4, #3
 8004f5c:	42a0      	cmp	r0, r4
 8004f5e:	d007      	beq.n	8004f70 <sbrk_aligned+0x38>
 8004f60:	1a21      	subs	r1, r4, r0
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fb96 	bl	8005694 <_sbrk_r>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d101      	bne.n	8004f70 <sbrk_aligned+0x38>
 8004f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f70:	4620      	mov	r0, r4
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	200006c8 	.word	0x200006c8

08004f78 <_malloc_r>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	1ccd      	adds	r5, r1, #3
 8004f7e:	f025 0503 	bic.w	r5, r5, #3
 8004f82:	3508      	adds	r5, #8
 8004f84:	2d0c      	cmp	r5, #12
 8004f86:	bf38      	it	cc
 8004f88:	250c      	movcc	r5, #12
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	db01      	blt.n	8004f94 <_malloc_r+0x1c>
 8004f90:	42a9      	cmp	r1, r5
 8004f92:	d905      	bls.n	8004fa0 <_malloc_r+0x28>
 8004f94:	230c      	movs	r3, #12
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	2600      	movs	r6, #0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005074 <_malloc_r+0xfc>
 8004fa4:	f000 f868 	bl	8005078 <__malloc_lock>
 8004fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fac:	461c      	mov	r4, r3
 8004fae:	bb5c      	cbnz	r4, 8005008 <_malloc_r+0x90>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f7ff ffc0 	bl	8004f38 <sbrk_aligned>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	4604      	mov	r4, r0
 8004fbc:	d155      	bne.n	800506a <_malloc_r+0xf2>
 8004fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc2:	4626      	mov	r6, r4
 8004fc4:	2e00      	cmp	r6, #0
 8004fc6:	d145      	bne.n	8005054 <_malloc_r+0xdc>
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	d048      	beq.n	800505e <_malloc_r+0xe6>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	eb04 0903 	add.w	r9, r4, r3
 8004fd6:	f000 fb5d 	bl	8005694 <_sbrk_r>
 8004fda:	4581      	cmp	r9, r0
 8004fdc:	d13f      	bne.n	800505e <_malloc_r+0xe6>
 8004fde:	6821      	ldr	r1, [r4, #0]
 8004fe0:	1a6d      	subs	r5, r5, r1
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7ff ffa7 	bl	8004f38 <sbrk_aligned>
 8004fea:	3001      	adds	r0, #1
 8004fec:	d037      	beq.n	800505e <_malloc_r+0xe6>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	442b      	add	r3, r5
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d038      	beq.n	800506e <_malloc_r+0xf6>
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	42a2      	cmp	r2, r4
 8005000:	d12b      	bne.n	800505a <_malloc_r+0xe2>
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e00f      	b.n	8005028 <_malloc_r+0xb0>
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	1b52      	subs	r2, r2, r5
 800500c:	d41f      	bmi.n	800504e <_malloc_r+0xd6>
 800500e:	2a0b      	cmp	r2, #11
 8005010:	d917      	bls.n	8005042 <_malloc_r+0xca>
 8005012:	1961      	adds	r1, r4, r5
 8005014:	42a3      	cmp	r3, r4
 8005016:	6025      	str	r5, [r4, #0]
 8005018:	bf18      	it	ne
 800501a:	6059      	strne	r1, [r3, #4]
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	bf08      	it	eq
 8005020:	f8c8 1000 	streq.w	r1, [r8]
 8005024:	5162      	str	r2, [r4, r5]
 8005026:	604b      	str	r3, [r1, #4]
 8005028:	4638      	mov	r0, r7
 800502a:	f104 060b 	add.w	r6, r4, #11
 800502e:	f000 f829 	bl	8005084 <__malloc_unlock>
 8005032:	f026 0607 	bic.w	r6, r6, #7
 8005036:	1d23      	adds	r3, r4, #4
 8005038:	1af2      	subs	r2, r6, r3
 800503a:	d0ae      	beq.n	8004f9a <_malloc_r+0x22>
 800503c:	1b9b      	subs	r3, r3, r6
 800503e:	50a3      	str	r3, [r4, r2]
 8005040:	e7ab      	b.n	8004f9a <_malloc_r+0x22>
 8005042:	42a3      	cmp	r3, r4
 8005044:	6862      	ldr	r2, [r4, #4]
 8005046:	d1dd      	bne.n	8005004 <_malloc_r+0x8c>
 8005048:	f8c8 2000 	str.w	r2, [r8]
 800504c:	e7ec      	b.n	8005028 <_malloc_r+0xb0>
 800504e:	4623      	mov	r3, r4
 8005050:	6864      	ldr	r4, [r4, #4]
 8005052:	e7ac      	b.n	8004fae <_malloc_r+0x36>
 8005054:	4634      	mov	r4, r6
 8005056:	6876      	ldr	r6, [r6, #4]
 8005058:	e7b4      	b.n	8004fc4 <_malloc_r+0x4c>
 800505a:	4613      	mov	r3, r2
 800505c:	e7cc      	b.n	8004ff8 <_malloc_r+0x80>
 800505e:	230c      	movs	r3, #12
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4638      	mov	r0, r7
 8005064:	f000 f80e 	bl	8005084 <__malloc_unlock>
 8005068:	e797      	b.n	8004f9a <_malloc_r+0x22>
 800506a:	6025      	str	r5, [r4, #0]
 800506c:	e7dc      	b.n	8005028 <_malloc_r+0xb0>
 800506e:	605b      	str	r3, [r3, #4]
 8005070:	deff      	udf	#255	; 0xff
 8005072:	bf00      	nop
 8005074:	200006c4 	.word	0x200006c4

08005078 <__malloc_lock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_lock+0x8>)
 800507a:	f7ff bf07 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 800507e:	bf00      	nop
 8005080:	200006c0 	.word	0x200006c0

08005084 <__malloc_unlock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_unlock+0x8>)
 8005086:	f7ff bf02 	b.w	8004e8e <__retarget_lock_release_recursive>
 800508a:	bf00      	nop
 800508c:	200006c0 	.word	0x200006c0

08005090 <__ssputs_r>:
 8005090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	688e      	ldr	r6, [r1, #8]
 8005096:	461f      	mov	r7, r3
 8005098:	42be      	cmp	r6, r7
 800509a:	680b      	ldr	r3, [r1, #0]
 800509c:	4682      	mov	sl, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	4690      	mov	r8, r2
 80050a2:	d82c      	bhi.n	80050fe <__ssputs_r+0x6e>
 80050a4:	898a      	ldrh	r2, [r1, #12]
 80050a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050aa:	d026      	beq.n	80050fa <__ssputs_r+0x6a>
 80050ac:	6965      	ldr	r5, [r4, #20]
 80050ae:	6909      	ldr	r1, [r1, #16]
 80050b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b4:	eba3 0901 	sub.w	r9, r3, r1
 80050b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050bc:	1c7b      	adds	r3, r7, #1
 80050be:	444b      	add	r3, r9
 80050c0:	106d      	asrs	r5, r5, #1
 80050c2:	429d      	cmp	r5, r3
 80050c4:	bf38      	it	cc
 80050c6:	461d      	movcc	r5, r3
 80050c8:	0553      	lsls	r3, r2, #21
 80050ca:	d527      	bpl.n	800511c <__ssputs_r+0x8c>
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7ff ff53 	bl	8004f78 <_malloc_r>
 80050d2:	4606      	mov	r6, r0
 80050d4:	b360      	cbz	r0, 8005130 <__ssputs_r+0xa0>
 80050d6:	6921      	ldr	r1, [r4, #16]
 80050d8:	464a      	mov	r2, r9
 80050da:	f000 faeb 	bl	80056b4 <memcpy>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	6126      	str	r6, [r4, #16]
 80050ec:	6165      	str	r5, [r4, #20]
 80050ee:	444e      	add	r6, r9
 80050f0:	eba5 0509 	sub.w	r5, r5, r9
 80050f4:	6026      	str	r6, [r4, #0]
 80050f6:	60a5      	str	r5, [r4, #8]
 80050f8:	463e      	mov	r6, r7
 80050fa:	42be      	cmp	r6, r7
 80050fc:	d900      	bls.n	8005100 <__ssputs_r+0x70>
 80050fe:	463e      	mov	r6, r7
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	4632      	mov	r2, r6
 8005104:	4641      	mov	r1, r8
 8005106:	f000 faab 	bl	8005660 <memmove>
 800510a:	68a3      	ldr	r3, [r4, #8]
 800510c:	1b9b      	subs	r3, r3, r6
 800510e:	60a3      	str	r3, [r4, #8]
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	4433      	add	r3, r6
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	2000      	movs	r0, #0
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	462a      	mov	r2, r5
 800511e:	f000 fad7 	bl	80056d0 <_realloc_r>
 8005122:	4606      	mov	r6, r0
 8005124:	2800      	cmp	r0, #0
 8005126:	d1e0      	bne.n	80050ea <__ssputs_r+0x5a>
 8005128:	6921      	ldr	r1, [r4, #16]
 800512a:	4650      	mov	r0, sl
 800512c:	f7ff feb8 	bl	8004ea0 <_free_r>
 8005130:	230c      	movs	r3, #12
 8005132:	f8ca 3000 	str.w	r3, [sl]
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	f04f 30ff 	mov.w	r0, #4294967295
 8005142:	e7e9      	b.n	8005118 <__ssputs_r+0x88>

08005144 <_svfiprintf_r>:
 8005144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	4698      	mov	r8, r3
 800514a:	898b      	ldrh	r3, [r1, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	b09d      	sub	sp, #116	; 0x74
 8005150:	4607      	mov	r7, r0
 8005152:	460d      	mov	r5, r1
 8005154:	4614      	mov	r4, r2
 8005156:	d50e      	bpl.n	8005176 <_svfiprintf_r+0x32>
 8005158:	690b      	ldr	r3, [r1, #16]
 800515a:	b963      	cbnz	r3, 8005176 <_svfiprintf_r+0x32>
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	f7ff ff0b 	bl	8004f78 <_malloc_r>
 8005162:	6028      	str	r0, [r5, #0]
 8005164:	6128      	str	r0, [r5, #16]
 8005166:	b920      	cbnz	r0, 8005172 <_svfiprintf_r+0x2e>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	e0d0      	b.n	8005314 <_svfiprintf_r+0x1d0>
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	616b      	str	r3, [r5, #20]
 8005176:	2300      	movs	r3, #0
 8005178:	9309      	str	r3, [sp, #36]	; 0x24
 800517a:	2320      	movs	r3, #32
 800517c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005180:	f8cd 800c 	str.w	r8, [sp, #12]
 8005184:	2330      	movs	r3, #48	; 0x30
 8005186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800532c <_svfiprintf_r+0x1e8>
 800518a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800518e:	f04f 0901 	mov.w	r9, #1
 8005192:	4623      	mov	r3, r4
 8005194:	469a      	mov	sl, r3
 8005196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800519a:	b10a      	cbz	r2, 80051a0 <_svfiprintf_r+0x5c>
 800519c:	2a25      	cmp	r2, #37	; 0x25
 800519e:	d1f9      	bne.n	8005194 <_svfiprintf_r+0x50>
 80051a0:	ebba 0b04 	subs.w	fp, sl, r4
 80051a4:	d00b      	beq.n	80051be <_svfiprintf_r+0x7a>
 80051a6:	465b      	mov	r3, fp
 80051a8:	4622      	mov	r2, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7ff ff6f 	bl	8005090 <__ssputs_r>
 80051b2:	3001      	adds	r0, #1
 80051b4:	f000 80a9 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ba:	445a      	add	r2, fp
 80051bc:	9209      	str	r2, [sp, #36]	; 0x24
 80051be:	f89a 3000 	ldrb.w	r3, [sl]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80a1 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051c8:	2300      	movs	r3, #0
 80051ca:	f04f 32ff 	mov.w	r2, #4294967295
 80051ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d2:	f10a 0a01 	add.w	sl, sl, #1
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	9307      	str	r3, [sp, #28]
 80051da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051de:	931a      	str	r3, [sp, #104]	; 0x68
 80051e0:	4654      	mov	r4, sl
 80051e2:	2205      	movs	r2, #5
 80051e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e8:	4850      	ldr	r0, [pc, #320]	; (800532c <_svfiprintf_r+0x1e8>)
 80051ea:	f7fa fff9 	bl	80001e0 <memchr>
 80051ee:	9a04      	ldr	r2, [sp, #16]
 80051f0:	b9d8      	cbnz	r0, 800522a <_svfiprintf_r+0xe6>
 80051f2:	06d0      	lsls	r0, r2, #27
 80051f4:	bf44      	itt	mi
 80051f6:	2320      	movmi	r3, #32
 80051f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051fc:	0711      	lsls	r1, r2, #28
 80051fe:	bf44      	itt	mi
 8005200:	232b      	movmi	r3, #43	; 0x2b
 8005202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005206:	f89a 3000 	ldrb.w	r3, [sl]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d015      	beq.n	800523a <_svfiprintf_r+0xf6>
 800520e:	9a07      	ldr	r2, [sp, #28]
 8005210:	4654      	mov	r4, sl
 8005212:	2000      	movs	r0, #0
 8005214:	f04f 0c0a 	mov.w	ip, #10
 8005218:	4621      	mov	r1, r4
 800521a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800521e:	3b30      	subs	r3, #48	; 0x30
 8005220:	2b09      	cmp	r3, #9
 8005222:	d94d      	bls.n	80052c0 <_svfiprintf_r+0x17c>
 8005224:	b1b0      	cbz	r0, 8005254 <_svfiprintf_r+0x110>
 8005226:	9207      	str	r2, [sp, #28]
 8005228:	e014      	b.n	8005254 <_svfiprintf_r+0x110>
 800522a:	eba0 0308 	sub.w	r3, r0, r8
 800522e:	fa09 f303 	lsl.w	r3, r9, r3
 8005232:	4313      	orrs	r3, r2
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	46a2      	mov	sl, r4
 8005238:	e7d2      	b.n	80051e0 <_svfiprintf_r+0x9c>
 800523a:	9b03      	ldr	r3, [sp, #12]
 800523c:	1d19      	adds	r1, r3, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	9103      	str	r1, [sp, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	bfbb      	ittet	lt
 8005246:	425b      	neglt	r3, r3
 8005248:	f042 0202 	orrlt.w	r2, r2, #2
 800524c:	9307      	strge	r3, [sp, #28]
 800524e:	9307      	strlt	r3, [sp, #28]
 8005250:	bfb8      	it	lt
 8005252:	9204      	strlt	r2, [sp, #16]
 8005254:	7823      	ldrb	r3, [r4, #0]
 8005256:	2b2e      	cmp	r3, #46	; 0x2e
 8005258:	d10c      	bne.n	8005274 <_svfiprintf_r+0x130>
 800525a:	7863      	ldrb	r3, [r4, #1]
 800525c:	2b2a      	cmp	r3, #42	; 0x2a
 800525e:	d134      	bne.n	80052ca <_svfiprintf_r+0x186>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	9203      	str	r2, [sp, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	bfb8      	it	lt
 800526c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005270:	3402      	adds	r4, #2
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800533c <_svfiprintf_r+0x1f8>
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	2203      	movs	r2, #3
 800527c:	4650      	mov	r0, sl
 800527e:	f7fa ffaf 	bl	80001e0 <memchr>
 8005282:	b138      	cbz	r0, 8005294 <_svfiprintf_r+0x150>
 8005284:	9b04      	ldr	r3, [sp, #16]
 8005286:	eba0 000a 	sub.w	r0, r0, sl
 800528a:	2240      	movs	r2, #64	; 0x40
 800528c:	4082      	lsls	r2, r0
 800528e:	4313      	orrs	r3, r2
 8005290:	3401      	adds	r4, #1
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005298:	4825      	ldr	r0, [pc, #148]	; (8005330 <_svfiprintf_r+0x1ec>)
 800529a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529e:	2206      	movs	r2, #6
 80052a0:	f7fa ff9e 	bl	80001e0 <memchr>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d038      	beq.n	800531a <_svfiprintf_r+0x1d6>
 80052a8:	4b22      	ldr	r3, [pc, #136]	; (8005334 <_svfiprintf_r+0x1f0>)
 80052aa:	bb1b      	cbnz	r3, 80052f4 <_svfiprintf_r+0x1b0>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	3307      	adds	r3, #7
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	3308      	adds	r3, #8
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ba:	4433      	add	r3, r6
 80052bc:	9309      	str	r3, [sp, #36]	; 0x24
 80052be:	e768      	b.n	8005192 <_svfiprintf_r+0x4e>
 80052c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c4:	460c      	mov	r4, r1
 80052c6:	2001      	movs	r0, #1
 80052c8:	e7a6      	b.n	8005218 <_svfiprintf_r+0xd4>
 80052ca:	2300      	movs	r3, #0
 80052cc:	3401      	adds	r4, #1
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 0c0a 	mov.w	ip, #10
 80052d6:	4620      	mov	r0, r4
 80052d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052dc:	3a30      	subs	r2, #48	; 0x30
 80052de:	2a09      	cmp	r2, #9
 80052e0:	d903      	bls.n	80052ea <_svfiprintf_r+0x1a6>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0c6      	beq.n	8005274 <_svfiprintf_r+0x130>
 80052e6:	9105      	str	r1, [sp, #20]
 80052e8:	e7c4      	b.n	8005274 <_svfiprintf_r+0x130>
 80052ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ee:	4604      	mov	r4, r0
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f0      	b.n	80052d6 <_svfiprintf_r+0x192>
 80052f4:	ab03      	add	r3, sp, #12
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	462a      	mov	r2, r5
 80052fa:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <_svfiprintf_r+0x1f4>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	4638      	mov	r0, r7
 8005300:	f3af 8000 	nop.w
 8005304:	1c42      	adds	r2, r0, #1
 8005306:	4606      	mov	r6, r0
 8005308:	d1d6      	bne.n	80052b8 <_svfiprintf_r+0x174>
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	065b      	lsls	r3, r3, #25
 800530e:	f53f af2d 	bmi.w	800516c <_svfiprintf_r+0x28>
 8005312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005314:	b01d      	add	sp, #116	; 0x74
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	ab03      	add	r3, sp, #12
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	462a      	mov	r2, r5
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <_svfiprintf_r+0x1f4>)
 8005322:	a904      	add	r1, sp, #16
 8005324:	4638      	mov	r0, r7
 8005326:	f000 f879 	bl	800541c <_printf_i>
 800532a:	e7eb      	b.n	8005304 <_svfiprintf_r+0x1c0>
 800532c:	08007961 	.word	0x08007961
 8005330:	0800796b 	.word	0x0800796b
 8005334:	00000000 	.word	0x00000000
 8005338:	08005091 	.word	0x08005091
 800533c:	08007967 	.word	0x08007967

08005340 <_printf_common>:
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4616      	mov	r6, r2
 8005346:	4699      	mov	r9, r3
 8005348:	688a      	ldr	r2, [r1, #8]
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005350:	4293      	cmp	r3, r2
 8005352:	bfb8      	it	lt
 8005354:	4613      	movlt	r3, r2
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800535c:	4607      	mov	r7, r0
 800535e:	460c      	mov	r4, r1
 8005360:	b10a      	cbz	r2, 8005366 <_printf_common+0x26>
 8005362:	3301      	adds	r3, #1
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	0699      	lsls	r1, r3, #26
 800536a:	bf42      	ittt	mi
 800536c:	6833      	ldrmi	r3, [r6, #0]
 800536e:	3302      	addmi	r3, #2
 8005370:	6033      	strmi	r3, [r6, #0]
 8005372:	6825      	ldr	r5, [r4, #0]
 8005374:	f015 0506 	ands.w	r5, r5, #6
 8005378:	d106      	bne.n	8005388 <_printf_common+0x48>
 800537a:	f104 0a19 	add.w	sl, r4, #25
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	6832      	ldr	r2, [r6, #0]
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	42ab      	cmp	r3, r5
 8005386:	dc26      	bgt.n	80053d6 <_printf_common+0x96>
 8005388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800538c:	1e13      	subs	r3, r2, #0
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	bf18      	it	ne
 8005392:	2301      	movne	r3, #1
 8005394:	0692      	lsls	r2, r2, #26
 8005396:	d42b      	bmi.n	80053f0 <_printf_common+0xb0>
 8005398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800539c:	4649      	mov	r1, r9
 800539e:	4638      	mov	r0, r7
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d01e      	beq.n	80053e4 <_printf_common+0xa4>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	bf02      	ittt	eq
 80053b2:	68e5      	ldreq	r5, [r4, #12]
 80053b4:	6833      	ldreq	r3, [r6, #0]
 80053b6:	1aed      	subeq	r5, r5, r3
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	bf0c      	ite	eq
 80053bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c0:	2500      	movne	r5, #0
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bfc4      	itt	gt
 80053c6:	1a9b      	subgt	r3, r3, r2
 80053c8:	18ed      	addgt	r5, r5, r3
 80053ca:	2600      	movs	r6, #0
 80053cc:	341a      	adds	r4, #26
 80053ce:	42b5      	cmp	r5, r6
 80053d0:	d11a      	bne.n	8005408 <_printf_common+0xc8>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e008      	b.n	80053e8 <_printf_common+0xa8>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4652      	mov	r2, sl
 80053da:	4649      	mov	r1, r9
 80053dc:	4638      	mov	r0, r7
 80053de:	47c0      	blx	r8
 80053e0:	3001      	adds	r0, #1
 80053e2:	d103      	bne.n	80053ec <_printf_common+0xac>
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	3501      	adds	r5, #1
 80053ee:	e7c6      	b.n	800537e <_printf_common+0x3e>
 80053f0:	18e1      	adds	r1, r4, r3
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	2030      	movs	r0, #48	; 0x30
 80053f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053fa:	4422      	add	r2, r4
 80053fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005404:	3302      	adds	r3, #2
 8005406:	e7c7      	b.n	8005398 <_printf_common+0x58>
 8005408:	2301      	movs	r3, #1
 800540a:	4622      	mov	r2, r4
 800540c:	4649      	mov	r1, r9
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	3001      	adds	r0, #1
 8005414:	d0e6      	beq.n	80053e4 <_printf_common+0xa4>
 8005416:	3601      	adds	r6, #1
 8005418:	e7d9      	b.n	80053ce <_printf_common+0x8e>
	...

0800541c <_printf_i>:
 800541c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	7e0f      	ldrb	r7, [r1, #24]
 8005422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005424:	2f78      	cmp	r7, #120	; 0x78
 8005426:	4691      	mov	r9, r2
 8005428:	4680      	mov	r8, r0
 800542a:	460c      	mov	r4, r1
 800542c:	469a      	mov	sl, r3
 800542e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005432:	d807      	bhi.n	8005444 <_printf_i+0x28>
 8005434:	2f62      	cmp	r7, #98	; 0x62
 8005436:	d80a      	bhi.n	800544e <_printf_i+0x32>
 8005438:	2f00      	cmp	r7, #0
 800543a:	f000 80d4 	beq.w	80055e6 <_printf_i+0x1ca>
 800543e:	2f58      	cmp	r7, #88	; 0x58
 8005440:	f000 80c0 	beq.w	80055c4 <_printf_i+0x1a8>
 8005444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800544c:	e03a      	b.n	80054c4 <_printf_i+0xa8>
 800544e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005452:	2b15      	cmp	r3, #21
 8005454:	d8f6      	bhi.n	8005444 <_printf_i+0x28>
 8005456:	a101      	add	r1, pc, #4	; (adr r1, 800545c <_printf_i+0x40>)
 8005458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054c9 	.word	0x080054c9
 8005464:	08005445 	.word	0x08005445
 8005468:	08005445 	.word	0x08005445
 800546c:	08005445 	.word	0x08005445
 8005470:	08005445 	.word	0x08005445
 8005474:	080054c9 	.word	0x080054c9
 8005478:	08005445 	.word	0x08005445
 800547c:	08005445 	.word	0x08005445
 8005480:	08005445 	.word	0x08005445
 8005484:	08005445 	.word	0x08005445
 8005488:	080055cd 	.word	0x080055cd
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005587 	.word	0x08005587
 8005494:	08005445 	.word	0x08005445
 8005498:	08005445 	.word	0x08005445
 800549c:	080055ef 	.word	0x080055ef
 80054a0:	08005445 	.word	0x08005445
 80054a4:	080054f5 	.word	0x080054f5
 80054a8:	08005445 	.word	0x08005445
 80054ac:	08005445 	.word	0x08005445
 80054b0:	0800558f 	.word	0x0800558f
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	602a      	str	r2, [r5, #0]
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c4:	2301      	movs	r3, #1
 80054c6:	e09f      	b.n	8005608 <_printf_i+0x1ec>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	0607      	lsls	r7, r0, #24
 80054ce:	f103 0104 	add.w	r1, r3, #4
 80054d2:	6029      	str	r1, [r5, #0]
 80054d4:	d501      	bpl.n	80054da <_printf_i+0xbe>
 80054d6:	681e      	ldr	r6, [r3, #0]
 80054d8:	e003      	b.n	80054e2 <_printf_i+0xc6>
 80054da:	0646      	lsls	r6, r0, #25
 80054dc:	d5fb      	bpl.n	80054d6 <_printf_i+0xba>
 80054de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	da03      	bge.n	80054ee <_printf_i+0xd2>
 80054e6:	232d      	movs	r3, #45	; 0x2d
 80054e8:	4276      	negs	r6, r6
 80054ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ee:	485a      	ldr	r0, [pc, #360]	; (8005658 <_printf_i+0x23c>)
 80054f0:	230a      	movs	r3, #10
 80054f2:	e012      	b.n	800551a <_printf_i+0xfe>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	6029      	str	r1, [r5, #0]
 80054fc:	0605      	lsls	r5, r0, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xe8>
 8005500:	681e      	ldr	r6, [r3, #0]
 8005502:	e002      	b.n	800550a <_printf_i+0xee>
 8005504:	0641      	lsls	r1, r0, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xe4>
 8005508:	881e      	ldrh	r6, [r3, #0]
 800550a:	4853      	ldr	r0, [pc, #332]	; (8005658 <_printf_i+0x23c>)
 800550c:	2f6f      	cmp	r7, #111	; 0x6f
 800550e:	bf0c      	ite	eq
 8005510:	2308      	moveq	r3, #8
 8005512:	230a      	movne	r3, #10
 8005514:	2100      	movs	r1, #0
 8005516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800551a:	6865      	ldr	r5, [r4, #4]
 800551c:	60a5      	str	r5, [r4, #8]
 800551e:	2d00      	cmp	r5, #0
 8005520:	bfa2      	ittt	ge
 8005522:	6821      	ldrge	r1, [r4, #0]
 8005524:	f021 0104 	bicge.w	r1, r1, #4
 8005528:	6021      	strge	r1, [r4, #0]
 800552a:	b90e      	cbnz	r6, 8005530 <_printf_i+0x114>
 800552c:	2d00      	cmp	r5, #0
 800552e:	d04b      	beq.n	80055c8 <_printf_i+0x1ac>
 8005530:	4615      	mov	r5, r2
 8005532:	fbb6 f1f3 	udiv	r1, r6, r3
 8005536:	fb03 6711 	mls	r7, r3, r1, r6
 800553a:	5dc7      	ldrb	r7, [r0, r7]
 800553c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005540:	4637      	mov	r7, r6
 8005542:	42bb      	cmp	r3, r7
 8005544:	460e      	mov	r6, r1
 8005546:	d9f4      	bls.n	8005532 <_printf_i+0x116>
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10b      	bne.n	8005564 <_printf_i+0x148>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	07de      	lsls	r6, r3, #31
 8005550:	d508      	bpl.n	8005564 <_printf_i+0x148>
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	6861      	ldr	r1, [r4, #4]
 8005556:	4299      	cmp	r1, r3
 8005558:	bfde      	ittt	le
 800555a:	2330      	movle	r3, #48	; 0x30
 800555c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005560:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005564:	1b52      	subs	r2, r2, r5
 8005566:	6122      	str	r2, [r4, #16]
 8005568:	f8cd a000 	str.w	sl, [sp]
 800556c:	464b      	mov	r3, r9
 800556e:	aa03      	add	r2, sp, #12
 8005570:	4621      	mov	r1, r4
 8005572:	4640      	mov	r0, r8
 8005574:	f7ff fee4 	bl	8005340 <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	d14a      	bne.n	8005612 <_printf_i+0x1f6>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	b004      	add	sp, #16
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f043 0320 	orr.w	r3, r3, #32
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	4833      	ldr	r0, [pc, #204]	; (800565c <_printf_i+0x240>)
 8005590:	2778      	movs	r7, #120	; 0x78
 8005592:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	6829      	ldr	r1, [r5, #0]
 800559a:	061f      	lsls	r7, r3, #24
 800559c:	f851 6b04 	ldr.w	r6, [r1], #4
 80055a0:	d402      	bmi.n	80055a8 <_printf_i+0x18c>
 80055a2:	065f      	lsls	r7, r3, #25
 80055a4:	bf48      	it	mi
 80055a6:	b2b6      	uxthmi	r6, r6
 80055a8:	07df      	lsls	r7, r3, #31
 80055aa:	bf48      	it	mi
 80055ac:	f043 0320 	orrmi.w	r3, r3, #32
 80055b0:	6029      	str	r1, [r5, #0]
 80055b2:	bf48      	it	mi
 80055b4:	6023      	strmi	r3, [r4, #0]
 80055b6:	b91e      	cbnz	r6, 80055c0 <_printf_i+0x1a4>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	f023 0320 	bic.w	r3, r3, #32
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	2310      	movs	r3, #16
 80055c2:	e7a7      	b.n	8005514 <_printf_i+0xf8>
 80055c4:	4824      	ldr	r0, [pc, #144]	; (8005658 <_printf_i+0x23c>)
 80055c6:	e7e4      	b.n	8005592 <_printf_i+0x176>
 80055c8:	4615      	mov	r5, r2
 80055ca:	e7bd      	b.n	8005548 <_printf_i+0x12c>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	6826      	ldr	r6, [r4, #0]
 80055d0:	6961      	ldr	r1, [r4, #20]
 80055d2:	1d18      	adds	r0, r3, #4
 80055d4:	6028      	str	r0, [r5, #0]
 80055d6:	0635      	lsls	r5, r6, #24
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	d501      	bpl.n	80055e0 <_printf_i+0x1c4>
 80055dc:	6019      	str	r1, [r3, #0]
 80055de:	e002      	b.n	80055e6 <_printf_i+0x1ca>
 80055e0:	0670      	lsls	r0, r6, #25
 80055e2:	d5fb      	bpl.n	80055dc <_printf_i+0x1c0>
 80055e4:	8019      	strh	r1, [r3, #0]
 80055e6:	2300      	movs	r3, #0
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	4615      	mov	r5, r2
 80055ec:	e7bc      	b.n	8005568 <_printf_i+0x14c>
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	1d1a      	adds	r2, r3, #4
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	681d      	ldr	r5, [r3, #0]
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4628      	mov	r0, r5
 80055fc:	f7fa fdf0 	bl	80001e0 <memchr>
 8005600:	b108      	cbz	r0, 8005606 <_printf_i+0x1ea>
 8005602:	1b40      	subs	r0, r0, r5
 8005604:	6060      	str	r0, [r4, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	2300      	movs	r3, #0
 800560c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005610:	e7aa      	b.n	8005568 <_printf_i+0x14c>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	462a      	mov	r2, r5
 8005616:	4649      	mov	r1, r9
 8005618:	4640      	mov	r0, r8
 800561a:	47d0      	blx	sl
 800561c:	3001      	adds	r0, #1
 800561e:	d0ad      	beq.n	800557c <_printf_i+0x160>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	079b      	lsls	r3, r3, #30
 8005624:	d413      	bmi.n	800564e <_printf_i+0x232>
 8005626:	68e0      	ldr	r0, [r4, #12]
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	4298      	cmp	r0, r3
 800562c:	bfb8      	it	lt
 800562e:	4618      	movlt	r0, r3
 8005630:	e7a6      	b.n	8005580 <_printf_i+0x164>
 8005632:	2301      	movs	r3, #1
 8005634:	4632      	mov	r2, r6
 8005636:	4649      	mov	r1, r9
 8005638:	4640      	mov	r0, r8
 800563a:	47d0      	blx	sl
 800563c:	3001      	adds	r0, #1
 800563e:	d09d      	beq.n	800557c <_printf_i+0x160>
 8005640:	3501      	adds	r5, #1
 8005642:	68e3      	ldr	r3, [r4, #12]
 8005644:	9903      	ldr	r1, [sp, #12]
 8005646:	1a5b      	subs	r3, r3, r1
 8005648:	42ab      	cmp	r3, r5
 800564a:	dcf2      	bgt.n	8005632 <_printf_i+0x216>
 800564c:	e7eb      	b.n	8005626 <_printf_i+0x20a>
 800564e:	2500      	movs	r5, #0
 8005650:	f104 0619 	add.w	r6, r4, #25
 8005654:	e7f5      	b.n	8005642 <_printf_i+0x226>
 8005656:	bf00      	nop
 8005658:	08007972 	.word	0x08007972
 800565c:	08007983 	.word	0x08007983

08005660 <memmove>:
 8005660:	4288      	cmp	r0, r1
 8005662:	b510      	push	{r4, lr}
 8005664:	eb01 0402 	add.w	r4, r1, r2
 8005668:	d902      	bls.n	8005670 <memmove+0x10>
 800566a:	4284      	cmp	r4, r0
 800566c:	4623      	mov	r3, r4
 800566e:	d807      	bhi.n	8005680 <memmove+0x20>
 8005670:	1e43      	subs	r3, r0, #1
 8005672:	42a1      	cmp	r1, r4
 8005674:	d008      	beq.n	8005688 <memmove+0x28>
 8005676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800567a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800567e:	e7f8      	b.n	8005672 <memmove+0x12>
 8005680:	4402      	add	r2, r0
 8005682:	4601      	mov	r1, r0
 8005684:	428a      	cmp	r2, r1
 8005686:	d100      	bne.n	800568a <memmove+0x2a>
 8005688:	bd10      	pop	{r4, pc}
 800568a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800568e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005692:	e7f7      	b.n	8005684 <memmove+0x24>

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d06      	ldr	r5, [pc, #24]	; (80056b0 <_sbrk_r+0x1c>)
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fc fd5a 	bl	8002158 <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	200006bc 	.word	0x200006bc

080056b4 <memcpy>:
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056bc:	d100      	bne.n	80056c0 <memcpy+0xc>
 80056be:	4770      	bx	lr
 80056c0:	b510      	push	{r4, lr}
 80056c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d1f9      	bne.n	80056c2 <memcpy+0xe>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <_realloc_r>:
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	4680      	mov	r8, r0
 80056d6:	4614      	mov	r4, r2
 80056d8:	460e      	mov	r6, r1
 80056da:	b921      	cbnz	r1, 80056e6 <_realloc_r+0x16>
 80056dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e0:	4611      	mov	r1, r2
 80056e2:	f7ff bc49 	b.w	8004f78 <_malloc_r>
 80056e6:	b92a      	cbnz	r2, 80056f4 <_realloc_r+0x24>
 80056e8:	f7ff fbda 	bl	8004ea0 <_free_r>
 80056ec:	4625      	mov	r5, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f4:	f000 f81b 	bl	800572e <_malloc_usable_size_r>
 80056f8:	4284      	cmp	r4, r0
 80056fa:	4607      	mov	r7, r0
 80056fc:	d802      	bhi.n	8005704 <_realloc_r+0x34>
 80056fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005702:	d812      	bhi.n	800572a <_realloc_r+0x5a>
 8005704:	4621      	mov	r1, r4
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fc36 	bl	8004f78 <_malloc_r>
 800570c:	4605      	mov	r5, r0
 800570e:	2800      	cmp	r0, #0
 8005710:	d0ed      	beq.n	80056ee <_realloc_r+0x1e>
 8005712:	42bc      	cmp	r4, r7
 8005714:	4622      	mov	r2, r4
 8005716:	4631      	mov	r1, r6
 8005718:	bf28      	it	cs
 800571a:	463a      	movcs	r2, r7
 800571c:	f7ff ffca 	bl	80056b4 <memcpy>
 8005720:	4631      	mov	r1, r6
 8005722:	4640      	mov	r0, r8
 8005724:	f7ff fbbc 	bl	8004ea0 <_free_r>
 8005728:	e7e1      	b.n	80056ee <_realloc_r+0x1e>
 800572a:	4635      	mov	r5, r6
 800572c:	e7df      	b.n	80056ee <_realloc_r+0x1e>

0800572e <_malloc_usable_size_r>:
 800572e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005732:	1f18      	subs	r0, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	bfbc      	itt	lt
 8005738:	580b      	ldrlt	r3, [r1, r0]
 800573a:	18c0      	addlt	r0, r0, r3
 800573c:	4770      	bx	lr
	...

08005740 <_init>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr

0800574c <_fini>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr
